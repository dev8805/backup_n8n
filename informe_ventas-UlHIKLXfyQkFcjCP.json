{"createdAt":"2025-10-06T05:14:28.699Z","updatedAt":"2025-10-19T01:53:10.000Z","id":"UlHIKLXfyQkFcjCP","name":"informe_ventas","active":false,"isArchived":false,"nodes":[{"parameters":{"jsCode":"// Tomar el mensaje desde Telegram Trigger con manejo de errores\nlet raw = \"\";\ntry {\n  raw = $input.first().json.mensaje || \"\";\n} catch (error) {\n  console.log(\"Error obteniendo mensaje de Telegram:\", error.message);\n  return [{ json: { error: \"No se pudo obtener el mensaje de Telegram\" } }];\n}\n\n// Normalizar texto mejorado (minúsculas, sin tildes, sin caracteres especiales)\nfunction normalize(str) {\n  return String(str)\n    .toLowerCase()\n    .trim()\n    .replace(/[áàäâã]/g, \"a\")\n    .replace(/[éèëê]/g, \"e\")\n    .replace(/[íìïî]/g, \"i\")\n    .replace(/[óòöôõ]/g, \"o\")\n    .replace(/[úùüû]/g, \"u\")\n    .replace(/[ñ]/g, \"n\")\n    .replace(/[ç]/g, \"c\")\n    .replace(/\\s+/g, \" \"); // Múltiples espacios a uno solo\n}\n\nconst msg = normalize(raw);\nconsole.log(\"Mensaje normalizado:\", msg);\n\n// Obtener fecha de hoy en zona horaria de Bogotá optimizada\nfunction todayInTZ(tz = \"America/Bogota\") {\n  const now = new Date();\n  const formatter = new Intl.DateTimeFormat(\"en-CA\", {\n    timeZone: tz,\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n  });\n  \n  const [year, month, day] = formatter.format(now).split('-');\n  return new Date(Number(year), Number(month) - 1, Number(day));\n}\n\n// Función para obtener el lunes de la semana actual\nfunction getMondayOfWeek(date) {\n  const d = new Date(date);\n  const day = d.getDay(); // 0 = domingo, 1 = lunes, ..., 6 = sábado\n  const diff = day === 0 ? -6 : 1 - day; // Si es domingo, retroceder 6 días\n  d.setDate(d.getDate() + diff);\n  return d;\n}\n\n// Función para obtener el domingo de la semana actual\nfunction getSundayOfWeek(date) {\n  const monday = getMondayOfWeek(date);\n  const sunday = new Date(monday);\n  sunday.setDate(monday.getDate() + 6);\n  return sunday;\n}\n\nfunction addDays(date, delta) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + delta);\n  return result;\n}\n\nfunction formatDDMMYYYY(date) {\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const yyyy = date.getFullYear();\n  return `${dd}-${mm}-${yyyy}`;\n}\n\n// Patrones de consulta más robustos\nconst patterns = {\n  hoy: /\\b(hoy|dia de hoy|ventas de hoy|hoy ventas)\\b/,\n  ayer: /\\b(ayer|dia de ayer|ventas de ayer|ayer ventas)\\b/,\n  semana: /\\b(semana|esta semana|ventas de la semana|semana actual)\\b/,\n  semanaCompleta: /\\b(semana completa|toda la semana|semana entera)\\b/,\n  mes: /\\b(mes|este mes|ventas del mes|mes actual|ultimos 30 dias|30 dias)\\b/,\n  // Nuevos patrones\n  antier: /\\b(antier|anteayer|antes de ayer)\\b/,\n  ultimosDias: /\\b(ultimos (\\d+) dias|(\\d+) dias)\\b/\n};\n\nconst hoy = todayInTZ();\nlet tipo = \"dia\";\nlet inicio = hoy;\nlet fin = hoy;\nlet descripcion = \"Ventas de hoy\";\n\n// Lógica de interpretación mejorada\nif (patterns.ayer.test(msg)) {\n  const ayer = addDays(hoy, -1);\n  inicio = ayer;\n  fin = ayer;\n  tipo = \"dia\";\n  descripcion = \"Ventas de ayer\";\n  \n} else if (patterns.antier.test(msg)) {\n  const antier = addDays(hoy, -2);\n  inicio = antier;\n  fin = antier;\n  tipo = \"dia\";\n  descripcion = \"Ventas de antier\";\n  \n} else if (patterns.semana.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes de esta semana\n  fin = hoy; // Hasta hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de esta semana (lunes a hoy)\";\n  \n} else if (patterns.semanaCompleta.test(msg)) {\n  inicio = getMondayOfWeek(hoy); // Desde el lunes\n  fin = getSundayOfWeek(hoy); // Hasta el domingo (puede ser futuro)\n  if (fin > hoy) fin = hoy; // No ir más allá de hoy\n  tipo = \"semana\";\n  descripcion = \"Ventas de la semana completa\";\n  \n} else if (patterns.mes.test(msg)) {\n  inicio = new Date(hoy.getFullYear(), hoy.getMonth(), 1);\n  fin = hoy;\n  tipo = \"mes\";\n  descripcion = \"Ventas del mes\";\n  \n} else if (patterns.ultimosDias.test(msg)) {\n  const match = msg.match(/(\\d+)/);\n  if (match) {\n    const dias = parseInt(match[1]);\n    if (dias > 0 && dias <= 365) { // Validar rango razonable\n      inicio = addDays(hoy, -(dias - 1));\n      fin = hoy;\n      tipo = \"rango\";\n      descripcion = `Ventas de los últimos ${dias} días`;\n    }\n  }\n} else if (patterns.hoy.test(msg)) {\n  // Explícitamente \"hoy\" (ya está configurado por defecto)\n  descripcion = \"Ventas de hoy\";\n}\n\n// Log de depuración\nconsole.log(`Interpretación: ${descripcion}`);\nconsole.log(`Período: ${formatDDMMYYYY(inicio)} al ${formatDDMMYYYY(fin)}`);\n\n// Validación de fechas\nif (inicio > hoy) {\n  console.log(\"Advertencia: Fecha de inicio en el futuro, ajustando a hoy\");\n  inicio = hoy;\n}\n\nif (fin > hoy) {\n  console.log(\"Advertencia: Fecha de fin en el futuro, ajustando a hoy\");\n  fin = hoy;\n}\n\n// Resultado con más información\nreturn [{\n  json: {\n    // Datos originales (compatibilidad)\n    queryType: tipo,\n    fechaInicio: formatDDMMYYYY(inicio),\n    fechaFin: formatDDMMYYYY(fin),\n    textoInterpretado: msg,\n    \n    // Nuevos datos\n    mensajeOriginal: raw,\n    descripcion: descripcion,\n    diasIncluidos: Math.ceil((fin - inicio) / (1000 * 60 * 60 * 24)) + 1,\n    fechaConsulta: formatDDMMYYYY(hoy),\n    \n    // Para debugging\n    debug: {\n      patronEncontrado: Object.keys(patterns).find(key => patterns[key].test(msg)) || \"hoy (default)\",\n      fechasCalculadas: {\n        inicio: inicio.toISOString().split('T')[0],\n        fin: fin.toISOString().split('T')[0]\n      }\n    }\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-176,272],"id":"6a328f10-cb52-4741-82c8-246c8530a2db","name":"Interpretar_mensaje"},{"parameters":{"numberInputs":5},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[640,240],"id":"197c9487-4c28-42f1-b693-1a8f6066a394","name":"Merge1"},{"parameters":{"assignments":{"assignments":[{"id":"cf5df9b0-6955-4b90-b679-6e957c06305a","name":"mensaje","value":"={{ $json.mensaje }}","type":"string"},{"id":"6da972ba-322f-4112-b4e2-b243a51e8239","name":"wa_id","value":"={{ $json.wa_id }}","type":"string"},{"id":"d12a8370-2dab-46c2-9f3e-8f8770c14a79","name":"instancia","value":"={{ $json.instancia }}","type":"string"},{"id":"e12fa449-cf4a-422a-81f5-829e24820548","name":"fecha","value":"={{ $json.fecha }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-368,272],"id":"a97130dc-32b7-4e58-86d5-3a82f771db25","name":"Edit Fields"},{"parameters":{"resource":"messages-api","instanceName":"={{ $('Edit Fields').first().json.instancia }}","remoteJid":"={{ $('Edit Fields').first().json.wa_id }}","messageText":"={{ $json.mensaje_texto }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[1360,272],"id":"98a3b8c4-2d6f-4fcd-a89c-dd10e8aec907","name":"Enviar texto","credentials":{"evolutionApi":{"id":"KDzQAvjURY1uhhvT","name":"Evolution account"}}},{"parameters":{"jsCode":"// ===== GENERADOR DE MENSAJE DE VENTAS =====\nconsole.log('=== GENERANDO MENSAJE DE CONFIRMACIÓN ===');\n\ntry {\n  // Obtener datos del nodo anterior\n  const datos = $input.first().json;\n  \n  // ===== FUNCIONES AUXILIARES =====\n  \n  function formatearNumero(valor) {\n    return new Intl.NumberFormat('es-CO').format(valor);\n  }\n\n  function formatearPeso(valor) {\n    return '$' + formatearNumero(valor);\n  }\n\n  function manejarSingularPlural(cantidad, palabra) {\n    if (cantidad === 1) {\n      if (palabra === 'unidades') {\n        return 'unidad';\n      }\n      if (palabra.endsWith('s')) {\n        return palabra.slice(0, -1);\n      }\n    }\n    return palabra;\n  }\n\n  function obtenerDiaSemana(fecha) {\n    const [dia, mes, año] = fecha.split('-');\n    const fechaObj = new Date(año, mes - 1, dia);\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];\n    return dias[fechaObj.getDay()];\n  }\n\n  function fechaLegible(fecha) {\n    const [dia, mes, año] = fecha.split('-');\n    const meses = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',\n                   'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];\n    const diaSemana = obtenerDiaSemana(fecha);\n    return `${diaSemana}, ${parseInt(dia)} de ${meses[parseInt(mes)-1]} de ${año}`;\n  }\n\n  function fechaLegibleCorta(fecha) {\n    const [dia, mes] = fecha.split('-');\n    return `${dia}/${mes}`;\n  }\n\n  // ===== CONSTRUIR MENSAJE =====\n  let mensaje = '';\n\n  if (datos.tipoConsulta === 'semana' || datos.tipoConsulta === 'mes') {\n    mensaje = '📊 RESUMEN SEMANAL\\n';\n    mensaje += `📅 ${fechaLegibleCorta(datos.fechaInicio)} al ${fechaLegibleCorta(datos.fechaFin)}\\n`;\n  } else {\n    mensaje = '📊 RESUMEN DE VENTAS\\n';\n    mensaje += `📅 ${fechaLegible(datos.fechaInicio)}\\n`;\n  }\n  \n  mensaje += '━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\n';\n\n  // ===== SECCIÓN DE VENTAS =====\n  if (datos.hay_ventas) {\n    mensaje += '📦 *PRODUCTOS VENDIDOS:*\\n';\n\n    // Lista de productos que no muestran stock y tienen orden fijo\n    const productosSinStock = [\"Arepas de QUESO\", \"Arepa BURGUER\", \"Chorizos\"];\n\n    const productosVentas = Object.entries(datos.ventas.productos);\n\n    // Separar excluidos y normales\n    const excluidos = productosSinStock\n      .map(nombre => productosVentas.find(([producto]) => producto === nombre))\n      .filter(Boolean); // elimina los que no existan en ventas\n\n    const normales = productosVentas\n      .filter(([producto]) => !productosSinStock.includes(producto))\n      .sort(([,a], [,b]) => b.cantidad - a.cantidad);\n\n    const productosOrdenados = [...excluidos, ...normales];\n\n    productosOrdenados.forEach(([producto, info]) => {\n      mensaje += `• ${formatearNumero(info.cantidad)} ${producto} | ${formatearPeso(info.valor)}`;\n\n      if (!productosSinStock.includes(producto)) {\n        if (info.stock > 0) {\n          const stockTexto = manejarSingularPlural(info.stock, 'unidades');\n          mensaje += ` | Stock: ${formatearNumero(info.stock)} ${stockTexto}\\n`;\n        } else if (info.stock === 0) {\n          mensaje += ' | ⚠️ Agotado\\n';\n        } else {\n          mensaje += '\\n';\n        }\n      } else {\n        mensaje += '\\n';\n      }\n    });\n\n    mensaje += '\\n━━━━━━━━━━━━━━━━━━━━━━━━━\\n';\n    mensaje += `📈 TOTAL VENTAS: ${formatearPeso(datos.ventas.total)}\\n\\n`;\n  } else {\n    mensaje += '⚠️ No se registraron ventas para este período\\n\\n';\n  }\n\n  // ===== SECCIÓN DE CONSUMOS PERSONALES =====\n  if (datos.hay_consumos) {\n    mensaje += '🏠 *CONSUMOS PERSONALES:*\\n';\n    const productosConsumos = Object.entries(datos.consumos.productos)\n      .sort(([,a], [,b]) => b.valor_total - a.valor_total);\n\n    productosConsumos.forEach(([producto, info]) => {\n      mensaje += `• ${formatearNumero(info.cantidad)} ${producto} - ${formatearPeso(info.valor_total)}\\n`;\n    });\n    \n    mensaje += '\\n━━━━━━━━━━━━━━━━━━━━━━━━━\\n';\n    mensaje += `💰 TOTAL CONSUMOS: ${formatearPeso(datos.consumos.total_valor)}\\n\\n`;\n  }\n\n  // ===== SECCIÓN DE COMPRAS (AL FINAL) =====\n  if (datos.hay_compras) {\n    mensaje += '🛒 *COMPRAS:*\\n';\n    const productosCompras = Object.entries(datos.compras.productos)\n      .sort(([,a], [,b]) => b.cantidad - a.cantidad);\n\n    productosCompras.forEach(([producto, info]) => {\n      const factorTexto = manejarSingularPlural(info.cantidad, info.factor);\n      mensaje += `• ${formatearNumero(info.cantidad)} ${factorTexto} ${producto}\\n`;\n    });\n    mensaje += '\\n';\n  }\n\n  console.log('✅ Mensaje generado exitosamente');\n  console.log(`   • Longitud: ${mensaje.length} caracteres`);\n  console.log(`   • Productos vendidos: ${datos.ventas.cantidad_productos}`);\n  console.log(`   • Total ventas: ${formatearPeso(datos.ventas.total)}`);\n  console.log(`   • Total consumos: ${formatearPeso(datos.consumos.total_valor)}`);\n\n  return [{\n    json: {\n      mensaje_texto: mensaje,\n      estadisticas: {\n        total_ventas: datos.ventas.total,\n        productos_vendidos: datos.ventas.cantidad_productos,\n        productos_consumidos: datos.consumos.cantidad_productos,\n        total_consumos: datos.consumos.total_valor,\n        productos_comprados: datos.compras.cantidad_productos,\n        hay_ventas: datos.hay_ventas,\n        hay_consumos: datos.hay_consumos,\n        hay_compras: datos.hay_compras\n      }\n    }\n  }];\n\n} catch (error) {\n  console.log('❌ ERROR generando mensaje:', error.message);\n  \n  return [{\n    json: {\n      error: true,\n      mensaje_texto: `❌ Error generando mensaje: ${error.message}`,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1088,272],"id":"52c3d15d-59a4-404e-9ae2-d648a0b291dc","name":"creaMensaje"},{"parameters":{"jsCode":"// ===== EXTRACTOR SIMPLE DE DATOS DE VENTAS =====\nconsole.log('=== EXTRAYENDO DATOS PARA MENSAJE DE CONFIRMACIÓN ===');\n\ntry {\n  // ===== OBTENER FECHAS DEL MENSAJE INTERPRETADO =====\n  const consulta = $('Interpretar_mensaje').first().json;\n  const fechaInicio = consulta.fechaInicio;\n  const fechaFin = consulta.fechaFin;\n  const tipoConsulta = consulta.queryType;\n  \n  console.log(`📅 Consultando desde: ${fechaInicio} hasta: ${fechaFin} (${tipoConsulta})`);\n\n  // ===== OBTENER TODOS LOS DATOS DEL MERGE =====\n  const todosLosDatos = $input.all();\n  \n  console.log(`📦 Total de items recibidos del Merge: ${todosLosDatos.length}`);\n  \n  // Separar los datos por tipo\n  let ventasRaw = [];\n  let inventarioRaw = [];\n  let consumosRaw = [];\n  let comprasRaw = [];\n  let preciosRaw = [];\n  \n  todosLosDatos.forEach((item, index) => {\n    const data = item.json;\n    \n    // Identificar PRECIOS primero (tiene precio_unitario y producto, SIN otros campos clave)\n    if (data.precio_unitario !== undefined && data.producto !== undefined && \n        data.cantidad === undefined && data.stock_actual_unidades === undefined && \n        data.valor_total === undefined && data.unidad_medida === undefined) {\n      preciosRaw.push(data);\n      console.log(`Item ${index}: PRECIO - ${data.producto}`);\n    }\n    // Identificar ventas (tienen valor_total y valor_unitario)\n    else if (data.valor_total !== undefined && data.valor_unitario !== undefined) {\n      ventasRaw.push(data);\n      console.log(`Item ${index}: VENTA - ${data.producto}`);\n    }\n    // Identificar inventario (tiene stock_actual_unidades)\n    else if (data.stock_actual_unidades !== undefined) {\n      inventarioRaw.push(data);\n      console.log(`Item ${index}: INVENTARIO - ${data.producto}`);\n    }\n    // Identificar consumos (tiene codigo_consumo que empieza con 'L')\n    else if (data.codigo_consumo !== undefined && data.codigo_consumo.startsWith('L')) {\n      consumosRaw.push(data);\n      console.log(`Item ${index}: CONSUMO - ${data.producto}`);\n    }\n    // Identificar compras (tiene unidad_medida)\n    else if (data.unidad_medida !== undefined) {\n      comprasRaw.push(data);\n      console.log(`Item ${index}: COMPRA - ${data.producto}`);\n    }\n    else {\n      console.log(`Item ${index}: NO IDENTIFICADO - Campos:`, Object.keys(data));\n    }\n  });\n  \n  console.log(`\\n📊 Resumen de datos separados:`);\n  console.log(`   • Ventas: ${ventasRaw.length}`);\n  console.log(`   • Inventario: ${inventarioRaw.length}`);\n  console.log(`   • Consumos: ${consumosRaw.length}`);\n  console.log(`   • Compras: ${comprasRaw.length}`);\n  console.log(`   • Precios: ${preciosRaw.length}`);\n\n  // ===== FUNCIÓN PARA NORMALIZAR FECHAS =====\n  function normalizarFecha(fechaStr) {\n    if (!fechaStr) return null;\n    \n    // Si viene en formato ISO (2025-10-11T05:00:00.000Z)\n    if (fechaStr.includes('T')) {\n      const fecha = new Date(fechaStr);\n      const dia = String(fecha.getDate()).padStart(2, '0');\n      const mes = String(fecha.getMonth() + 1).padStart(2, '0');\n      const año = fecha.getFullYear();\n      return `${dia}-${mes}-${año}`;\n    }\n    \n    // Si viene en formato DD-MM-YYYY\n    return fechaStr;\n  }\n\n  // ===== PROCESAR VENTAS =====\n  console.log(`📊 Procesando ventas: ${ventasRaw.length}`);\n  \n  const ventasResumen = {};\n  let totalVentas = 0;\n  \n  ventasRaw.forEach(venta => {\n    const producto = venta.producto;\n    const cantidad = parseInt(venta.cantidad) || 0;\n    const valorUnitario = parseFloat(venta.valor_unitario) || 0;\n    const valorTotal = parseFloat(venta.valor_total) || 0;\n    \n    if (!ventasResumen[producto]) {\n      ventasResumen[producto] = {\n        cantidad: 0,\n        valor: 0,\n        stock: 0\n      };\n    }\n    \n    ventasResumen[producto].cantidad += cantidad;\n    ventasResumen[producto].valor += valorTotal;\n    totalVentas += valorTotal;\n  });\n\n  // ===== PROCESAR INVENTARIO =====\n  const inventario = {};\n  inventarioRaw.forEach(item => {\n    const producto = item.producto;\n    const stock = parseInt(item.stock_actual_unidades) || 0;\n    \n    if (producto && producto.trim()) {\n      inventario[producto.trim()] = stock;\n    }\n  });\n\n  // ===== CREAR MAPA DE PRECIOS =====\n  console.log(`💰 Precios obtenidos: ${preciosRaw.length}`);\n\n  const preciosPorProducto = {};\n  preciosRaw.forEach(item => {\n    const producto = item.producto;\n    const precio = parseFloat(item.precio_unitario) || 0;\n    preciosPorProducto[producto] = precio;\n    console.log(`   • ${producto}: $${precio}`);\n  });\n\n  // ===== PROCESAR CONSUMOS =====\n  console.log(`📊 Procesando consumos: ${consumosRaw.length}`);\n  \n  const consumosResumen = {};\n  let totalConsumos = 0;\n  let totalValorConsumos = 0;\n  \n  consumosRaw.forEach(consumo => {\n    const producto = consumo.producto;\n    const cantidad = parseInt(consumo.cantidad) || 0;\n    const precio = preciosPorProducto[producto] || 0;\n    const valorTotal = cantidad * precio;\n    \n    if (!consumosResumen[producto]) {\n      consumosResumen[producto] = {\n        cantidad: 0,\n        precio: precio,\n        valor_total: 0\n      };\n    }\n    \n    consumosResumen[producto].cantidad += cantidad;\n    consumosResumen[producto].valor_total += valorTotal;\n    totalConsumos += cantidad;\n    totalValorConsumos += valorTotal;\n  });\n\n  // ===== PROCESAR COMPRAS =====\n  console.log(`📊 Procesando compras: ${comprasRaw.length}`);\n  \n  const comprasResumen = {};\n  let totalCompras = 0;\n  \n  comprasRaw.forEach(compra => {\n    const producto = compra.producto;\n    const cantidad = parseInt(compra.cantidad) || 0;\n    const factor = compra.unidad_medida || 'unidades';\n    \n    if (!comprasResumen[producto]) {\n      comprasResumen[producto] = { cantidad: 0, factor };\n    }\n    \n    comprasResumen[producto].cantidad += cantidad;\n    totalCompras += cantidad;\n  });\n\n  // ===== BUSCAR STOCK DE PRODUCTOS VENDIDOS =====\n  function buscarStock(nombreProducto) {\n    if (!nombreProducto) return 0;\n    \n    const nombre = nombreProducto.trim().toLowerCase();\n    \n    // Búsqueda exacta\n    for (const [producto, stock] of Object.entries(inventario)) {\n      if (producto.toLowerCase() === nombre) {\n        return stock;\n      }\n    }\n    \n    // Búsqueda parcial\n    for (const [producto, stock] of Object.entries(inventario)) {\n      if (producto.toLowerCase().includes(nombre) || nombre.includes(producto.toLowerCase())) {\n        return stock;\n      }\n    }\n    \n    return 0;\n  }\n\n  // Agregar stock a productos vendidos\n  Object.keys(ventasResumen).forEach(producto => {\n    ventasResumen[producto].stock = buscarStock(producto);\n  });\n\n  // ===== DATOS FINALES SIMPLIFICADOS =====\n  const datosExtraidos = {\n    // Metadatos de consulta\n    fechaInicio: normalizarFecha(fechaInicio),\n    fechaFin: normalizarFecha(fechaFin),\n    tipoConsulta: tipoConsulta,\n    \n    // Datos principales\n    ventas: {\n      productos: ventasResumen,\n      total: totalVentas,\n      cantidad_productos: Object.keys(ventasResumen).length,\n      total_transacciones: ventasRaw.length\n    },\n    \n    consumos: {\n      productos: consumosResumen,\n      total_cantidad: totalConsumos,\n      total_valor: totalValorConsumos,\n      cantidad_productos: Object.keys(consumosResumen).length\n    },\n    \n    compras: {\n      productos: comprasResumen,\n      total_cantidad: totalCompras,\n      cantidad_productos: Object.keys(comprasResumen).length\n    },\n    \n    inventario: {\n      productos: inventario,\n      total_productos: Object.keys(inventario).length\n    },\n    \n    // Flags útiles para el mensaje\n    hay_ventas: Object.keys(ventasResumen).length > 0,\n    hay_consumos: Object.keys(consumosResumen).length > 0,\n    hay_compras: Object.keys(comprasResumen).length > 0,\n    hay_productos_agotados: Object.values(ventasResumen).some(v => v.stock === 0)\n  };\n\n  console.log('✅ Datos extraídos exitosamente:');\n  console.log(`   • Ventas: ${datosExtraidos.ventas.cantidad_productos} productos, $${datosExtraidos.ventas.total.toLocaleString()}`);\n  console.log(`   • Consumos: ${datosExtraidos.consumos.cantidad_productos} productos, ${datosExtraidos.consumos.total_cantidad} unidades, $${datosExtraidos.consumos.total_valor.toLocaleString()}`);\n  console.log(`   • Compras: ${datosExtraidos.compras.cantidad_productos} productos, ${datosExtraidos.compras.total_cantidad} items`);\n  console.log(`   • Inventario: ${datosExtraidos.inventario.total_productos} productos`);\n\n  return [{\n    json: datosExtraidos\n  }];\n\n} catch (error) {\n  console.log('❌ ERROR:', error.message);\n  console.log('Stack:', error.stack);\n  \n  return [{\n    json: {\n      error: true,\n      mensaje: `Error extrayendo datos: ${error.message}`,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,272],"id":"e9bdcb2b-6c80-4c84-9322-d79c599e0a8d","name":"extraeDatos"},{"parameters":{"operation":"executeQuery","query":"SELECT \n  codigo,\n  producto,\n  cantidad,\n  razon,\n  created_at\nFROM movimientos_inventario\nWHERE tenant_id = '{{ $('Guardar tenant').item.json.tenant_id }}'\n  AND tipo = 'entrada'\n  AND activo = true\n  AND DATE(created_at) BETWEEN '{{ $('Interpretar_mensaje').first().json.fechaInicio.split('-').reverse().join('-') }}'::date\n  AND '{{ $('Interpretar_mensaje').first().json.fechaFin.split('-').reverse().join('-') }}'::date\nORDER BY created_at DESC\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[224,768],"id":"6e08456f-f067-487b-b223-ccc73ed3ef4f","name":"registroEntradaInventario1","executeOnce":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  codigo,\n  producto,\n  ABS(cantidad) as cantidad,\n  razon,\n  created_at\nFROM movimientos_inventario\nWHERE tenant_id = '{{ $('Guardar tenant').item.json.tenant_id }}'\n  AND tipo = 'consumo'\n  AND activo = true\n  AND DATE(created_at) BETWEEN '{{ $('Interpretar_mensaje').first().json.fechaInicio.split('-').reverse().join('-') }}'::date\n  AND '{{ $('Interpretar_mensaje').first().json.fechaFin.split('-').reverse().join('-') }}'::date\nORDER BY created_at DESC\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[224,592],"id":"25e6c86f-6cb8-401a-9f8f-7f928f303fa2","name":"obtener_consumos","executeOnce":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  i.inventario_id,\n  i.producto_id,\n  i.cantidad,\n  p.producto,\n  p.codigo\nFROM inventario i\nINNER JOIN productos p ON i.producto_id = p.producto_id AND i.tenant_id = p.tenant_id\nWHERE i.tenant_id = '{{ $('Guardar tenant').item.json.tenant_id }}'\nORDER BY p.producto\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[224,192],"id":"2e2fd52e-7d78-4017-9839-24ea9c6c640b","name":"obtener_inventario","executeOnce":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"workflowInputs":{"values":[{"name":"tenant_id"},{"name":"user_id"},{"name":"permisos"},{"name":"rol"},{"name":"nombre_usuario"},{"name":"mensaje"},{"name":"numero_telefono"},{"name":"date_time"},{"name":"instancia"},{"name":"autorizado"}]}},"id":"6d07366a-a7e9-4d02-9e22-c97de6c8ed3f","typeVersion":1.1,"name":"When Executed by Another Workflow","type":"n8n-nodes-base.executeWorkflowTrigger","position":[-1664,272]},{"parameters":{"jsCode":"// Verificar si viene pre-autorizado desde gerson_ventas\nif ($json.autorizado === true && $json.tenant_id) {\n  // Parsear permisos si vienen como string\n  let permisos = $json.permisos;\n  if (typeof permisos === 'string') {\n    permisos = JSON.parse(permisos);\n  }\n  \n  return {\n    tenant_id: $json.tenant_id,\n    user_id: $json.user_id,\n    rol: $json.rol,\n    permisos: permisos,\n    nombre_usuario: $json.nombre_usuario,\n    mensaje: $json.mensaje,\n    numero_telefono: $json.numero_telefono,\n    date_time: $json.date_time,\n    instancia: $json.instancia,\n    pre_validado: true\n  };\n} else {\n  // Llamada directa (testing sin gerson_ventas)\n  return {\n    necesita_validacion: true,\n    mensaje: $json.mensaje,\n    numero_telefono: $json.numero_telefono,\n    date_time: $json.date_time,\n    instancia: $json.instancia\n  };\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1440,272],"id":"e8414fc8-d3c1-44c7-8850-029e844dd215","name":"Verificar Autorización"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"64263bb7-218a-4965-94ae-f56eba7a053d","leftValue":"={{ $json.necesita_validacion }}","rightValue":"true","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-1168,256],"id":"8d7d9590-a59b-4791-89f5-9646e101799a","name":"Necesita Validación?"},{"parameters":{"workflowId":{"__rl":true,"value":"niw7nbWmuCLHmO5F","mode":"list","cachedResultUrl":"/workflow/niw7nbWmuCLHmO5F","cachedResultName":"identificar_tenant"},"workflowInputs":{"mappingMode":"defineBelow","value":{}},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.3,"position":[-656,32],"id":"a2970a75-e087-400b-a2b4-35b77a3fcec6","name":"Call 'identificar_tenant'"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"940d13a5-4dcf-4eac-9587-0bfe0cdf16ec","leftValue":"={{ $json.permisos.informes.ver }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-560,272],"id":"b3dd20bb-6132-469f-a993-d66f404b5da7","name":"Permiso Ver Informes"},{"parameters":{"jsCode":"return {\n  mensaje: `❌ ${$json.nombre_usuario || 'Usuario'}, no tienes permiso para ver informes.`\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-336,512],"id":"571cb8e8-fa61-4c17-a65f-01c13950b945","name":"sin permiso"},{"parameters":{"operation":"executeQuery","query":"SELECT \n  v.codigo,\n  v.total,\n  v.items,\n  v.created_at,\n  v.created_by\nFROM ventas v\nWHERE v.tenant_id = '{{ $('Guardar tenant').item.json.tenant_id }}'\n  AND DATE(v.created_at) BETWEEN '{{ $('Interpretar_mensaje').first().json.fechaInicio.split('-').reverse().join('-') }}'::date\n  AND '{{ $('Interpretar_mensaje').first().json.fechaFin.split('-').reverse().join('-') }}'::date\nORDER BY v.created_at DESC\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[224,0],"id":"3efe2d83-341c-4953-b1fe-6d8fbc211ff7","name":"obtener_ventas","executeOnce":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  producto_id,\n  codigo,\n  producto,\n  precio_unitario,\n  costo\nFROM productos\nWHERE tenant_id = '{{ $('Guardar tenant').item.json.tenant_id }}'\n  AND activo = true\nORDER BY producto\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[224,384],"id":"859d9112-fb65-4b9d-830d-081f6fa599b6","name":"obtener_productos","executeOnce":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"jsCode":"let datos;\n\nif ($json.pre_validado === true) {\n  datos = $json;\n} else {\n  datos = $json;\n}\n\nreturn {\n  tenant_id: datos.tenant_id,\n  user_id: datos.user_id,\n  permisos: datos.permisos,\n  rol: datos.rol,\n  nombre_usuario: datos.nombre_usuario\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-960,352],"id":"6c690fb7-96f1-4e5a-92cb-9bc0725427de","name":"Guardar tenant"}],"connections":{"Interpretar_mensaje":{"main":[[{"node":"obtener_ventas","type":"main","index":0},{"node":"obtener_inventario","type":"main","index":0},{"node":"obtener_consumos","type":"main","index":0},{"node":"registroEntradaInventario1","type":"main","index":0},{"node":"obtener_productos","type":"main","index":0}]]},"Merge1":{"main":[[{"node":"extraeDatos","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Interpretar_mensaje","type":"main","index":0}]]},"extraeDatos":{"main":[[{"node":"creaMensaje","type":"main","index":0}]]},"registroEntradaInventario1":{"main":[[{"node":"Merge1","type":"main","index":4}]]},"obtener_consumos":{"main":[[{"node":"Merge1","type":"main","index":3}]]},"obtener_inventario":{"main":[[{"node":"Merge1","type":"main","index":1}]]},"creaMensaje":{"main":[[{"node":"Enviar texto","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"Verificar Autorización","type":"main","index":0}]]},"Necesita Validación?":{"main":[[{"node":"Call 'identificar_tenant'","type":"main","index":0}],[{"node":"Guardar tenant","type":"main","index":0}]]},"Verificar Autorización":{"main":[[{"node":"Necesita Validación?","type":"main","index":0}]]},"Permiso Ver Informes":{"main":[[{"node":"Edit Fields","type":"main","index":0}],[{"node":"sin permiso","type":"main","index":0}]]},"obtener_ventas":{"main":[[{"node":"Merge1","type":"main","index":0}]]},"obtener_productos":{"main":[[{"node":"Merge1","type":"main","index":2}]]},"Guardar tenant":{"main":[[{"node":"Permiso Ver Informes","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/Bogota","callerPolicy":"workflowsFromSameOwner","executionTimeout":15,"availableInMCP":false,"errorWorkflow":"6372jK3MqgOJM8iD"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"mensaje":"1 \"Coca Cola 350ml\"\n","numero_telefono":"573103015865@s.whatsapp.net","date_time":"11/10/2025","instancia":"pepe cadena"}}]},"versionId":"1b1d50b6-9582-4997-9700-cb354ad0d44a","triggerCount":0,"shared":[{"createdAt":"2025-10-06T05:14:28.703Z","updatedAt":"2025-10-06T05:14:28.703Z","role":"workflow:owner","workflowId":"UlHIKLXfyQkFcjCP","projectId":"5qz94e5MiZbyOPrk"}],"tags":[{"createdAt":"2025-10-12T03:56:33.451Z","updatedAt":"2025-10-12T03:56:33.451Z","id":"1HiaED7XPSmwYswE","name":"ventas"}]}