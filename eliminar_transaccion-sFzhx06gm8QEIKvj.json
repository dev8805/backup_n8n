{"createdAt":"2025-10-10T21:54:10.792Z","updatedAt":"2025-10-12T03:57:49.000Z","id":"sFzhx06gm8QEIKvj","name":"eliminar_transaccion","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"Mensaje"},{"name":"instancia"},{"name":"fecha"},{"name":"telefono"}]}},"id":"c055762a-8fe7-4141-a639-df2372f30060","typeVersion":1.1,"name":"When Executed by Another Workflow","type":"n8n-nodes-base.executeWorkflowTrigger","position":[224,352]},{"parameters":{"modelId":{"__rl":true,"value":"models/gemini-2.0-flash","mode":"list","cachedResultName":"models/gemini-2.0-flash"},"messages":{"values":[{"content":"={{ $json.Mensaje }}"}]},"options":{"systemMessage":"=Eres un asistente que extrae informaciÃ³n de mensajes de WhatsApp para procesar reversiones de ventas.\n\nTu tarea es extraer TODOS los IDs de ventas que el usuario quiere revertir.\n\nREGLAS:\n1. Extrae TODOS los nÃºmeros o cÃ³digos de venta del mensaje\n2. Los IDs pueden estar separados por comas, espacios, o la palabra \"y\"\n3. Acepta formatos: P001, 123, P050, etc.\n4. Devuelve un array con todos los IDs encontrados\n5. Si no hay IDs, devuelve un array vacÃ­o\n\nFORMATO DE RESPUESTA (JSON):\n{\n  \"venta_ids\": [\"ID1\", \"ID2\", \"ID3\"],\n  \"valido\": true/false\n}\n\nEJEMPLOS:\n\nMensaje: \"revertir P268\"\nRespuesta: {\"venta_ids\": [\"P268\"], \"valido\": true}\n\nMensaje: \"revertir P268, P269, P270\"\nRespuesta: {\"venta_ids\": [\"P268\", \"P269\", \"P270\"], \"valido\": true}\n\nMensaje: \"eliminar 268 269 270\"\nRespuesta: {\"venta_ids\": [\"268\", \"269\", \"270\"], \"valido\": true}\n\nMensaje: \"borrar P001 y P002\"\nRespuesta: {\"venta_ids\": [\"P001\", \"P002\"], \"valido\": true}\n\nMensaje: \"cancelar ventas 5, 10, 15\"\nRespuesta: {\"venta_ids\": [\"5\", \"10\", \"15\"], \"valido\": true}\n\nMensaje: \"hola\"\nRespuesta: {\"venta_ids\": [], \"valido\": false}\n\nIMPORTANTE: \n- Responde SOLO con el JSON\n- Siempre devuelve venta_ids como array, aunque sea un solo ID\n- Si hay al menos un ID vÃ¡lido, valido debe ser true"}},"type":"@n8n/n8n-nodes-langchain.googleGemini","typeVersion":1,"position":[432,352],"id":"7d0324ec-256d-4f72-86e1-19a6819ffa7f","name":"Message a model","credentials":{"googlePalmApi":{"id":"2llV2c1H3lSUoFpn","name":"milenaGRATIS"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"bd17279e-655a-43d7-bcdd-ba3e4824eedf","leftValue":"={{ $json.valido }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1008,352],"id":"34c70098-001e-4eb6-9652-50241481fe5a","name":"If"},{"parameters":{"jsCode":"// Obtener la respuesta de Gemini\nconst geminiResponse = $input.first().json;\n\n// Extraer el texto de la respuesta\nconst textResponse = geminiResponse.content?.parts?.[0]?.text || '';\n\n// Limpiar los bloques de cÃ³digo markdown (```json ... ```)\nconst jsonText = textResponse\n  .replace(/```json\\n/g, '')\n  .replace(/```/g, '')\n  .trim();\n\n// Parsear el JSON\nlet parsedData;\ntry {\n  parsedData = JSON.parse(jsonText);\n  \n  // Formatear los IDs: agregar P si no lo tienen y hacer padding\n  if (parsedData.venta_ids && Array.isArray(parsedData.venta_ids)) {\n    parsedData.venta_ids = parsedData.venta_ids.map(id => {\n      const ventaId = id.toString().trim();\n      \n      // Si es solo nÃºmero, agregar P y padding\n      if (/^\\d+$/.test(ventaId)) {\n        return 'P' + ventaId.padStart(3, '0');\n      }\n      // Si ya tiene P, asegurar el formato correcto\n      else if (/^P\\d+$/i.test(ventaId)) {\n        const numero = ventaId.substring(1);\n        return 'P' + numero.padStart(3, '0');\n      }\n      // Si tiene otro formato, devolver tal cual\n      return ventaId;\n    });\n    \n    // Validar que haya al menos un ID\n    parsedData.valido = parsedData.venta_ids.length > 0;\n  } else {\n    parsedData.valido = false;\n    parsedData.venta_ids = [];\n  }\n  \n} catch (error) {\n  parsedData = {\n    venta_ids: [],\n    valido: false,\n    error: 'No se pudo parsear la respuesta'\n  };\n}\n\nreturn {\n  json: parsedData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[784,352],"id":"f5c04d2b-6ea5-45df-b04f-23a0dee8e419","name":"parsea"},{"parameters":{"resource":"messages-api","instanceName":"={{ $('When Executed by Another Workflow').first().json.instancia }}","remoteJid":"={{ $('When Executed by Another Workflow').first().json.telefono }}","messageText":"={{ $json.mensaje }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[2912,64],"id":"e2d9e274-0cb8-4cbb-95c6-81c380ff6c12","name":"Enviar texto","credentials":{"evolutionApi":{"id":"KDzQAvjURY1uhhvT","name":"Evolution account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  codigo_venta,\n  producto,\n  cantidad,\n  valor_unitario,\n  valor_total,\n  costo,\n  sessionid,\n  fecha\nFROM ventas \nWHERE codigo_venta = '{{ $json.venta_id }}'\nLIMIT 1;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2048,80],"id":"2589e5fe-e6b5-4e85-a612-4f48f4c9ed25","name":"Buscar ventas","credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"respondWith":"json","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[1008,592],"id":"ff3977d9-524a-4b3e-8f7e-25bd0177342d","name":"Respond to Webhook"},{"parameters":{"jsCode":"// Obtener el array de venta_ids\nconst ventaIds = $input.first().json.venta_ids || [];\n\n// Convertir cada ID en un item separado\nreturn ventaIds.map(id => ({\n  json: {\n    venta_id: id\n  }\n}));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1248,336],"id":"956dddf9-3063-44a4-a9f3-8e46f01cbe98","name":"Convertir IDs a items"},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1792,64],"id":"fa3cc772-d7e9-4981-a40c-d18f34dc6bc5","name":"loop ventas"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"1f40b8ea-1033-40d5-8111-43d4a0e555d7","leftValue":"={{ $json.codigo_venta }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2256,80],"id":"47dac8a5-6431-43ed-9723-6712d849bdeb","name":"Â¿venta existe?"},{"parameters":{"operation":"executeQuery","query":"WITH venta_eliminada AS (\n  DELETE FROM ventas \n  WHERE codigo_venta = '{{ $json.codigo_venta }}'\n  RETURNING codigo_venta, producto, cantidad, valor_total\n)\nUPDATE cache_inventario \nSET \n  stock_actual_unidades = stock_actual_unidades + (SELECT cantidad FROM venta_eliminada),\n  updated_at = NOW()\nWHERE producto = (SELECT producto FROM venta_eliminada)\nRETURNING \n  (SELECT codigo_venta FROM venta_eliminada) as codigo_venta,\n  (SELECT producto FROM venta_eliminada) as producto,\n  (SELECT cantidad FROM venta_eliminada) as cantidad,\n  (SELECT valor_total FROM venta_eliminada) as valor_total,\n  stock_actual_unidades as nuevo_stock;\n","options":{"queryBatching":"transaction"}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2496,64],"id":"60f6e366-59de-48db-9aa3-51a965faaa39","name":"Revertir Venta","alwaysOutputData":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"jsCode":"// Obtener los datos de la venta actual desde el input (viene de Revertir Venta)\nconst venta = $input.first().json;\n\n// Obtener el stock actualizado (viene del RETURNING del query Revertir Venta)\nconst stockActual = venta.nuevo_stock || venta.stock_actual_unidades || 0;\n\n// Formatear el valor total en pesos colombianos\nconst valorFormateado = Number(venta.valor_total).toLocaleString('es-CO', {\n  style: 'currency',\n  currency: 'COP',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});\n\n// Construir mensaje de confirmaciÃ³n individual\nconst mensaje = `âœ… *Venta Revertida*\\n\\n` +\n  `ðŸ”– CÃ³digo: *${venta.codigo_venta}*\\n` +\n  `ðŸ“¦ Producto: ${venta.producto}\\n` +\n  `ðŸ“Š Cantidad: ${venta.cantidad} unidades\\n` +\n  `ðŸ’° Valor: ${valorFormateado}\\n\\n` +\n  `âœ“ Inventario actualizado (Stock actual: ${stockActual} unidades)`;\n\n// Retornar el mensaje con los datos del trigger para el nodo de envÃ­o\nreturn [{\n  json: {\n    mensaje: mensaje,\n    codigo_venta: venta.codigo_venta,\n    instancia: $('When Executed by Another Workflow').item.json.instancia,\n    telefono: $('When Executed by Another Workflow').item.json.telefono\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2720,64],"id":"3aaa0270-47d3-4c76-8b66-fbe420910ea4","name":"construir resumen"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.venta_id }}","rightValue":"P","operator":{"type":"string","operation":"startsWith"},"id":"d2e6bb75-0220-4011-8259-c27d8dfaa72e"}],"combinator":"and"},"renameOutput":true,"outputKey":"eliminar venta"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d1b9c44a-6d53-484a-8f09-bfa5978a3d93","leftValue":"={{ $json.venta_id }}","rightValue":"L","operator":{"type":"string","operation":"startsWith"}}],"combinator":"and"},"renameOutput":true,"outputKey":"eliminar consumo"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"28464b47-c3b2-4286-b613-2baf1079b4f1","leftValue":"={{ $json.venta_id }}","rightValue":"A","operator":{"type":"string","operation":"startsWith"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Eliminar entrada"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.3,"position":[1456,336],"id":"ba8c94c8-4f97-4ea8-a5b8-355101f770a7","name":"Switch"},{"parameters":{"resource":"messages-api","instanceName":"={{ $('When Executed by Another Workflow').first().json.instancia }}","remoteJid":"={{ $('When Executed by Another Workflow').first().json.telefono }}","messageText":"={{ $json.mensaje }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[2912,352],"id":"854a6ce8-9aee-42fa-8292-a4766c852f72","name":"Enviar texto1","credentials":{"evolutionApi":{"id":"KDzQAvjURY1uhhvT","name":"Evolution account"}}},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1792,352],"id":"1ee44559-ece4-4323-8546-56c495fb27f0","name":"loop ventas1"},{"parameters":{"jsCode":"// Obtener los datos del consumo actual desde el input (viene de Revertir Consumo)\nconst consumo = $input.first().json;\n\n// Obtener el stock actualizado (viene del RETURNING del query Revertir Consumo)\nconst stockActual = consumo.nuevo_stock || consumo.stock_actual_unidades || 0;\n\n// Construir mensaje de confirmaciÃ³n individual para consumo\nconst mensaje = `âœ… *Consumo Revertido*\\n\\n` +\n  `ðŸ”– CÃ³digo: *${consumo.codigo_consumo}*\\n` +\n  `ðŸ“¦ Producto: ${consumo.producto}\\n` +\n  `ðŸ“Š Cantidad: ${consumo.cantidad} unidades\\n\\n` +\n  `âœ“ Inventario actualizado (Stock actual: ${stockActual} unidades)`;\n\n// Retornar el mensaje con los datos del trigger para el nodo de envÃ­o\nreturn [{\n  json: {\n    mensaje: mensaje,\n    codigo_consumo: consumo.codigo_consumo,\n    instancia: $('When Executed by Another Workflow').item.json.instancia,\n    telefono: $('When Executed by Another Workflow').item.json.telefono\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2704,352],"id":"ac39fbf6-cfa8-411d-b526-43d2189e03ce","name":"construir resumen1"},{"parameters":{"operation":"executeQuery","query":"SELECT \n  codigo_consumo,\n  producto,\n  cantidad,\n  precio,\n  fecha,\n  created_at\nFROM consumos_personales \nWHERE codigo_consumo = '{{ $json.venta_id }}'\nLIMIT 1;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2016,368],"id":"4e6c8393-aeef-489f-bb24-7e76b47541b9","name":"Buscar consumos","credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"1f40b8ea-1033-40d5-8111-43d4a0e555d7","leftValue":"={{ $json.codigo_consumo }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2208,368],"id":"ca196ddf-fa50-4a67-8cb3-446a2755d5c0","name":"Â¿consumo existe?"},{"parameters":{"operation":"executeQuery","query":"WITH consumo_eliminado AS (\n  DELETE FROM consumos_personales \n  WHERE codigo_consumo = '{{ $json.codigo_consumo }}'\n  RETURNING codigo_consumo, producto, cantidad, precio, (cantidad * precio) as valor_total\n)\nUPDATE cache_inventario \nSET \n  stock_actual_unidades = stock_actual_unidades + (SELECT cantidad FROM consumo_eliminado),\n  updated_at = NOW()\nWHERE producto = (SELECT producto FROM consumo_eliminado)\nRETURNING \n  (SELECT codigo_consumo FROM consumo_eliminado) as codigo_consumo,\n  (SELECT codigo_consumo FROM consumo_eliminado) as codigo_venta,\n  (SELECT producto FROM consumo_eliminado) as producto,\n  (SELECT cantidad FROM consumo_eliminado) as cantidad,\n  (SELECT precio FROM consumo_eliminado) as precio,\n  (SELECT valor_total FROM consumo_eliminado) as valor_total,\n  stock_actual_unidades as nuevo_stock;\n","options":{"queryBatching":"transaction"}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2448,352],"id":"153efa11-70c4-43b8-aae7-0fa6c2d7c24b","name":"Revertir consumo","alwaysOutputData":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"resource":"messages-api","instanceName":"={{ $('When Executed by Another Workflow').first().json.instancia }}","remoteJid":"={{ $('When Executed by Another Workflow').first().json.telefono }}","messageText":"={{ $json.mensaje }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[2912,672],"id":"b27acd4b-1b9e-41ac-a304-7d4510f4ac18","name":"Enviar texto2","credentials":{"evolutionApi":{"id":"KDzQAvjURY1uhhvT","name":"Evolution account"}}},{"parameters":{"options":{"reset":false}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1792,672],"id":"6d54b9d6-5feb-406e-b1b0-a06a51289b99","name":"loop ventas2"},{"parameters":{"jsCode":"// Obtener los datos de la entrada actual desde el input (viene de Revertir Entrada)\nconst entrada = $input.first().json;\n\n// Obtener el stock actualizado (viene del RETURNING del query)\nconst stockActual = entrada.nuevo_stock || entrada.stock_actual_unidades || 0;\n\n// Construir mensaje de confirmaciÃ³n individual para entrada\nconst mensaje = `âœ… *Entrada Revertida*\\n\\n` +\n  `ðŸ”– CÃ³digo: *${entrada.codigo_entrada}*\\n` +\n  `ðŸ“¦ Producto: ${entrada.producto}\\n` +\n  `ðŸ“Š Cantidad: ${entrada.cantidad} ${entrada.unidad_medida}\\n\\n` +\n  `âœ“ Inventario actualizado (Stock actual: ${stockActual} unidades)`;\n\n// Retornar el mensaje con los datos del trigger para el nodo de envÃ­o\nreturn [{\n  json: {\n    mensaje: mensaje,\n    codigo_entrada: entrada.codigo_entrada,\n    instancia: $('When Executed by Another Workflow').item.json.instancia,\n    telefono: $('When Executed by Another Workflow').item.json.telefono\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2704,672],"id":"d623fca7-7a26-49da-8584-a8b1dc2e558e","name":"construir resumen2"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"1f40b8ea-1033-40d5-8111-43d4a0e555d7","leftValue":"={{ $json.codigo_entrada }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2208,688],"id":"59f85d82-9296-425b-889b-d255ea8a31f3","name":"Â¿entrada existe?"},{"parameters":{"operation":"executeQuery","query":"WITH entrada_eliminada AS (\n  DELETE FROM registro_entrada_inventario \n  WHERE codigo_entrada = '{{ $json.codigo_entrada }}'\n  RETURNING codigo_entrada, producto, cantidad, unidad_medida, fecha\n),\ncalculo_unidades AS (\n  SELECT \n    e.codigo_entrada,\n    e.producto,\n    e.cantidad,\n    e.unidad_medida,\n    e.fecha,\n    c.unidad_medida as unidad_medida_inventario,\n    c.factor_unidades,\n    -- Calcular unidades reales a restar\n    CASE \n      WHEN UPPER(e.unidad_medida) = 'UNIDADES' THEN e.cantidad\n      WHEN UPPER(e.unidad_medida) = UPPER(c.unidad_medida) THEN e.cantidad * c.factor_unidades\n      ELSE e.cantidad\n    END as unidades_reales\n  FROM entrada_eliminada e\n  INNER JOIN cache_inventario c ON e.producto = c.producto\n)\nUPDATE cache_inventario \nSET \n  stock_actual_unidades = stock_actual_unidades - (SELECT unidades_reales FROM calculo_unidades),\n  updated_at = NOW()\nWHERE producto = (SELECT producto FROM calculo_unidades)\nRETURNING \n  (SELECT codigo_entrada FROM calculo_unidades) as codigo_entrada,\n  (SELECT codigo_entrada FROM calculo_unidades) as codigo_venta,\n  (SELECT producto FROM calculo_unidades) as producto,\n  (SELECT cantidad FROM calculo_unidades) as cantidad,\n  (SELECT unidad_medida FROM calculo_unidades) as unidad_medida,\n  (SELECT fecha FROM calculo_unidades) as fecha,\n  (SELECT factor_unidades FROM calculo_unidades) as factor_unidades,\n  (SELECT unidades_reales FROM calculo_unidades) as unidades_reales,\n  stock_actual_unidades as nuevo_stock;\n","options":{"queryBatching":"transaction"}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2448,672],"id":"4a45f375-49dd-459c-9666-eb34958ea866","name":"Rvertir entrada","alwaysOutputData":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  codigo_entrada,\n  codigo_entrada as codigo_venta,  -- Alias para compatibilidad\n  producto,\n  cantidad,\n  unidad_medida,\n  fecha,\n  created_at\nFROM registro_entrada_inventario \nWHERE codigo_entrada = '{{ $json.venta_id }}'\nLIMIT 1;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2016,688],"id":"b0fa2d66-5b7d-47fc-b5aa-751c132bcf03","name":"Buscar entradas","credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"Message a model","type":"main","index":0}]]},"Message a model":{"main":[[{"node":"parsea","type":"main","index":0}]]},"parsea":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"Convertir IDs a items","type":"main","index":0}],[{"node":"Respond to Webhook","type":"main","index":0}]]},"Buscar ventas":{"main":[[{"node":"Â¿venta existe?","type":"main","index":0}]]},"Convertir IDs a items":{"main":[[{"node":"Switch","type":"main","index":0}]]},"loop ventas":{"main":[[],[{"node":"Buscar ventas","type":"main","index":0}]]},"Â¿venta existe?":{"main":[[{"node":"Revertir Venta","type":"main","index":0}],[{"node":"loop ventas","type":"main","index":0}]]},"Revertir Venta":{"main":[[{"node":"loop ventas","type":"main","index":0},{"node":"construir resumen","type":"main","index":0}]]},"construir resumen":{"main":[[{"node":"Enviar texto","type":"main","index":0}]]},"Switch":{"main":[[{"node":"loop ventas","type":"main","index":0}],[{"node":"loop ventas1","type":"main","index":0}],[{"node":"loop ventas2","type":"main","index":0}]]},"loop ventas1":{"main":[[],[{"node":"Buscar consumos","type":"main","index":0}]]},"construir resumen1":{"main":[[{"node":"Enviar texto1","type":"main","index":0}]]},"Buscar consumos":{"main":[[{"node":"Â¿consumo existe?","type":"main","index":0}]]},"Â¿consumo existe?":{"main":[[{"node":"Revertir consumo","type":"main","index":0}],[{"node":"loop ventas1","type":"main","index":0}]]},"Revertir consumo":{"main":[[{"node":"loop ventas1","type":"main","index":0},{"node":"construir resumen1","type":"main","index":0}]]},"loop ventas2":{"main":[[],[{"node":"Buscar entradas","type":"main","index":0}]]},"construir resumen2":{"main":[[{"node":"Enviar texto2","type":"main","index":0}]]},"Â¿entrada existe?":{"main":[[{"node":"Rvertir entrada","type":"main","index":0}],[{"node":"loop ventas2","type":"main","index":0}]]},"Rvertir entrada":{"main":[[{"node":"loop ventas2","type":"main","index":0},{"node":"construir resumen2","type":"main","index":0}]]},"Buscar entradas":{"main":[[{"node":"Â¿entrada existe?","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Â¿venta existe?":[{"json":{"codigo_venta":"P012","producto":"Coca cola MEGA","cantidad":1,"valor_unitario":"7500.00","valor_total":"7500.00","costo":null,"sessionid":null,"fecha":"2025-10-11T05:00:00.000Z"}}],"When Executed by Another Workflow":[{"json":{"Mensaje":"eliminar a006","instancia":"pepe cadena","fecha":"11/10/2025","telefono":"573103015865@s.whatsapp.net"}}]},"versionId":"f9aa9c97-537c-4684-8746-e39dcc8ff575","triggerCount":0,"shared":[{"createdAt":"2025-10-10T21:54:10.806Z","updatedAt":"2025-10-10T21:54:10.806Z","role":"workflow:owner","workflowId":"sFzhx06gm8QEIKvj","projectId":"5qz94e5MiZbyOPrk"}],"tags":[{"createdAt":"2025-10-12T03:56:33.451Z","updatedAt":"2025-10-12T03:56:33.451Z","id":"1HiaED7XPSmwYswE","name":"ventas"}]}