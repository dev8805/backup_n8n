{"createdAt":"2025-10-06T05:18:58.473Z","updatedAt":"2025-10-10T20:11:13.000Z","id":"Wg6zh3EFPjY6VqYI","name":"ingresan Productos A Inventario","active":false,"isArchived":false,"nodes":[{"parameters":{"jsCode":"// Capturamos la respuesta de Gemini desde la estructura correcta\nlet respuestaGemini = String($input.first().json.content?.parts?.[0]?.text || '').trim();\n\n// Limpiamos los bloques de markdown\nrespuestaGemini = respuestaGemini.replace(/```json\\n?/g, '').replace(/\\n?```/g, '').trim();\n\n// Parseamos el JSON\nlet productosExtraidos;\ntry {\n  productosExtraidos = JSON.parse(respuestaGemini);\n} catch (error) {\n  return [{ \n    json: { \n      error: \"No se pudo procesar la respuesta de Gemini\", \n      respuesta_original: respuestaGemini \n    } \n  }];\n}\n\n// Procesamos el array de productos\nconst resultados = productosExtraidos.map((item, index) => {\n  \n  // Preparamos los datos (aceptando may√∫sculas o min√∫sculas)\n  const fila = {\n    producto: item.PRODUCTO || item.producto || \"\",\n    unidad_medida: item.UNIDAD_MEDIDA || item.unidad_medida || \"\",\n    cantidad: parseFloat(item.CANTIDAD || item.cantidad || 0),\n    fecha: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' }),\n    errores: []\n  };\n  \n  // Validaciones con mensajes personalizados\n  if (!fila.producto || fila.producto === \"\") {\n    fila.errores.push(\"No se pudo identificar el producto. Vuelve a ingresar esta compra.\");\n  }\n  \n  if (!fila.cantidad || fila.cantidad <= 0 || isNaN(fila.cantidad)) {\n    fila.errores.push(`No especificaste la cantidad para ${fila.producto || 'este producto'}. Vuelve a ingresar esta compra.`);\n  }\n  \n  if (!fila.unidad_medida || fila.unidad_medida === \"\") {\n    fila.errores.push(`No especificaste la unidad de medida para ${fila.producto || 'este producto'}. Vuelve a ingresar esta compra.`);\n  }\n  \n  // Log del resultado\n  if (fila.errores.length === 0) {\n    console.log(`‚úÖ ${index + 1}. ${fila.producto} - ${fila.cantidad} ${fila.unidad_medida}`);\n  } else {\n    console.log(`‚ùå ${index + 1}. ${fila.producto}: ${fila.errores.join(' | ')}`);\n  }\n  \n  return { json: fila };\n});\n\nconsole.log(`üìä Total procesado: ${resultados.length} producto(s)`);\n\nreturn resultados;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1088,288],"id":"91c74ae7-a9eb-4a3a-a12d-3ad817b0bf10","name":"Code4"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"52ba995c-4cc3-4773-a7d4-ed5791a2feb6","leftValue":"={{ $json.errores }}","rightValue":0,"operator":{"type":"array","operation":"empty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-864,288],"id":"1c68654e-2412-4a71-9333-b2c8a60aaa87","name":"Procesar_compra"},{"parameters":{"jsCode":"try {\n  // ======= OBTENER DATOS DE M√öLTIPLES COMPRAS =======\n  const comprasData = $(\"Procesar_compra\").all();\n  console.log(`üì¶ Procesando ${comprasData.length} compras`);\n  \n  // Validaci√≥n inicial\n  if (!comprasData || comprasData.length === 0) {\n    throw new Error(\"No hay datos de compras para procesar\");\n  }\n  \n  // ======= OBTENER INVENTARIO ACTUAL =======\n  const inventarioItems = $input.all(); // Todos los items del inventario\n  console.log(`üìä Items de inventario disponibles: ${inventarioItems.length}`);\n  \n  // Crear un mapa del inventario por producto para b√∫squeda r√°pida\n  const inventarioMap = {};\n  inventarioItems.forEach(item => {\n    if (item.json && item.json.producto) {\n      const producto = item.json.producto.trim();\n      inventarioMap[producto] = item.json;\n    }\n  });\n  \n  console.log(`üìã Productos en inventario:`, Object.keys(inventarioMap));\n  \n  // ======= PROCESAR CADA COMPRA INDIVIDUALMENTE =======\n  const resultados = [];\n  \n  comprasData.forEach((compraItem, index) => {\n    try {\n      const compra = compraItem.json;\n      console.log(`\\nüîç Procesando compra ${index + 1}: ${compra.producto}`);\n      \n      // Validaci√≥n de datos de compra\n      if (!compra || !compra.producto) {\n        throw new Error(`Compra ${index + 1}: Datos inv√°lidos - falta informaci√≥n del producto`);\n      }\n      \n      // Buscar este producto espec√≠fico en el inventario\n      const producto = compra.producto.trim();\n      const inventario = inventarioMap[producto];\n      \n      console.log(`   üìã Producto: ${producto}`);\n      \n      // VALIDACI√ìN ESTRICTA: El producto DEBE existir en el inventario\n      if (!inventario || !inventario.producto) {\n        throw new Error(`${producto}: No existe en el inventario. Use el nombre exacto del inventario.`);\n      }\n      \n      console.log(`   üìç Producto encontrado en inventario: ‚úÖ`);\n      \n      // Procesar datos del producto\n      const cantidadCompra = Number(compra.cantidad) || 0;\n      const unidadMedida = compra.unidad_medida || \"cajas\";\n      \n      // Validaciones adicionales\n      if (cantidadCompra <= 0) {\n        throw new Error(`${producto}: La cantidad debe ser mayor a 0`);\n      }\n      \n      // Stock actual\n      const stockActual = Number(inventario.stock_actual_unidades) || 0;\n      \n      // ======= L√ìGICA DE C√ÅLCULO SEG√öN UNIDAD DE MEDIDA =======\n      let unidadesIngresadas;\n      \n      if (unidadMedida === \"unidades\") {\n        // Suma directa sin usar factor\n        unidadesIngresadas = cantidadCompra;\n      } else {\n        // Usa el factor para cajas, pacas, paquetes, litros, botellas, etc.\n        const factor = inventario.factor_unidades || 0;\n        unidadesIngresadas = cantidadCompra * factor;\n      }\n      \n      // Calcular nuevo stock\n      const nuevoStock = stockActual + unidadesIngresadas;\n      \n      // Fecha actual en zona horaria de Colombia\n      const fechaActual = new Date().toLocaleString('es-CO', { \n        timeZone: 'America/Bogota',\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n      \n      // Log del procesamiento\n      console.log(`   üìä Stock: ${stockActual} ‚Üí ${nuevoStock} (+${unidadesIngresadas})`);\n      \n      // Crear resultado para este producto\n      const resultado = {\n        json: {\n          producto: producto,\n          unidad_medida: unidadMedida,\n          factor_unidades: inventario.factor_unidades,\n          cantidad: cantidadCompra,\n          stock_actual_unidades: nuevoStock,\n          fecha_ultima_compra: fechaActual,\n          unidades_ingresadas: unidadesIngresadas,\n          stock_anterior: stockActual,\n          accion: \"actualizar\",\n          // Campos adicionales para tracking\n          row_number: inventario.row_number || null,\n          procesado_en_lote: true,\n          indice_compra: index + 1\n        }\n      };\n      \n      resultados.push(resultado);\n      console.log(`   ‚úÖ Producto procesado exitosamente`);\n      \n    } catch (error) {\n      console.error(`   ‚ùå Error procesando compra ${index + 1}:`, error.message);\n      \n      // Agregar resultado de error para este producto espec√≠fico\n      resultados.push({\n        json: {\n          error: true,\n          mensaje: error.message,\n          producto_con_error: compraItem.json?.producto || 'Desconocido',\n          indice_compra: index + 1,\n          timestamp: new Date().toISOString()\n        }\n      });\n    }\n  });\n  \n  // ======= RESUMEN FINAL =======\n  const exitosos = resultados.filter(r => !r.json.error).length;\n  const conError = resultados.filter(r => r.json.error).length;\n  \n  console.log(`\\nüìä RESUMEN FINAL:`);\n  console.log(`   Total compras: ${comprasData.length}`);\n  console.log(`   Procesadas exitosamente: ${exitosos}`);\n  console.log(`   Con errores: ${conError}`);\n  \n  // Retornar TODOS los resultados\n  return resultados;\n  \n} catch (error) {\n  console.error(\"‚ùå Error general procesando compras:\", error.message);\n  \n  // Retornar error estructurado general\n  return [{\n    json: {\n      error: true,\n      mensaje: `Error general: ${error.message}`,\n      tipo_error: \"error_general\",\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-288,272],"id":"5a6ef18d-c1cb-402d-b028-6dcff58e5b6a","name":"Calcular_Stock","alwaysOutputData":true},{"parameters":{"assignments":{"assignments":[{"id":"a43847d7-9c88-495e-b01a-9dc87dac721e","name":"final_message","value":"={{ $json.mensaje }}","type":"string"},{"id":"2655e097-412c-4299-9410-7ca616088ba0","name":"sessionid","value":"={{ $json.wa_id }}","type":"string"},{"id":"f29ed700-e3b7-42c0-a963-78aa19163346","name":"datetime","value":"={{ $json.fecha }}","type":"string"},{"id":"e22e1768-594d-4730-9043-0fb05ad7caae","name":"instancia","value":"={{ $json.instancia }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1680,288],"id":"983db8b8-5a97-4963-855f-887e506dec2d","name":"Edit Fields3"},{"parameters":{"jsCode":"// C√≥digo para generar mensaje de confirmaci√≥n de inventario\n// USAR DATOS DE CALCULAR_STOCK (que est√°n completos)\nconst inputData = $('Calcular_Stock').all();\n\n// Funci√≥n para formatear n√∫meros con separadores de miles\nfunction formatearNumero(numero) {\n  return new Intl.NumberFormat('es-CO').format(numero);\n}\n\n// Funci√≥n para formatear precios\nfunction formatearPrecio(precio) {\n  if (precio === 0 || precio === null || precio === undefined) {\n    return \"No registrado\";\n  }\n  return \"$\" + formatearNumero(precio);\n}\n\n// Funci√≥n para manejar singular/plural de unidades de medida\nfunction pluralizar(cantidad, unidad) {\n  const cantidadNum = parseInt(cantidad);\n  \n  if (cantidadNum === 1) {\n    // Convertir a singular\n    if (unidad === \"cajas\") return \"caja\";\n    if (unidad === \"pacas\") return \"paca\";\n    if (unidad === \"unidades\") return \"unidad\";\n    if (unidad === \"botellas\") return \"botella\";\n    if (unidad === \"litros\") return \"litro\";\n    return unidad; // Si no coincide, devolver original\n  }\n  \n  return unidad; // Plural (original)\n}\n\n// Procesar los datos\nconst productos = [];\nlet totalProductosActualizados = 0;\nlet totalUnidadesIngresadas = 0;\n\ninputData.forEach((item, index) => {\n  // Los datos vienen directamente en item.json desde Calcular_Stock\n  const data = item.json;\n  \n  // Verificar si hay errores\n  if (data.error) {\n    productos.push({\n      nombre: data.producto_con_error || \"Producto desconocido\",\n      error: data.mensaje,\n      esError: true\n    });\n    return;\n  }\n  \n  // Extraer valores (ahora directamente, ya que sabemos que est√°n disponibles)\n  const cantidad = parseInt(data.cantidad);\n  const stockAnterior = parseInt(data.stock_anterior);\n  const stockNuevo = parseInt(data.stock_actual_unidades);\n  const unidadesIngresadas = parseInt(data.unidades_ingresadas);\n  const precio = parseFloat(data.precio_ultima_compra) || 0;\n  const producto = data.producto;\n  const unidadMedida = data.unidad_medida;\n  \n  // Procesar producto exitoso\n  const unidadFormateada = pluralizar(cantidad, unidadMedida);\n  \n  productos.push({\n    nombre: producto,\n    cantidad: cantidad,\n    unidad: unidadFormateada,\n    stockAnterior: stockAnterior,\n    stockNuevo: stockNuevo,\n    unidadesIngresadas: unidadesIngresadas,\n    factor: parseInt(data.factor_unidades),\n    precio: precio,\n    accion: data.accion,\n    esError: false\n  });\n  \n  totalProductosActualizados++;\n  totalUnidadesIngresadas += unidadesIngresadas;\n});\n\n// Generar mensaje de confirmaci√≥n\nlet mensaje = \"\";\n\n// --- INICIO DE LOS CAMBIOS ---\n// Mensaje para cuando no hay productos que procesar\nif (productos.length === 0) {\n  mensaje = \"‚ö†Ô∏è El inventario no tiene productos para procesar.\";\n} else {\n  // Encabezado con nuevo formato\n  mensaje += \"‚úÖ *Informe de actualizaci√≥n de inventario*\\n\";\n  mensaje += `üìÖ ${new Date().toLocaleDateString('es-CO', { \n    timeZone: 'America/Bogota',\n    weekday: 'long',\n    year: 'numeric', \n    month: 'long', \n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  })}`.replace(/^\\w/, c => c.toUpperCase()) + \"\\n\\n\";\n  \n  // Listar productos en formato m√°s detallado\n  mensaje += \"*Detalles de los productos procesados:*\\n\\n\";\n  \n  productos.forEach((producto, index) => {\n    if (producto.esError) {\n      mensaje += `‚ùå *${producto.nombre}* - Error: ${producto.error}\\n`;\n    } else {\n      mensaje += `üì¶ *${producto.nombre}*:\\n`;\n      mensaje += `- Cantidad: ${producto.cantidad} ${producto.unidad}\\n`;\n      mensaje += `- Nuevo stock: ${formatearNumero(producto.stockNuevo)} unidades\\n\\n`;\n    }\n  });\n}\n// --- FIN DE LOS CAMBIOS ---\n\n// Crear versi√≥n de texto plano (sin markdown)\nlet mensajeTextoPlano = mensaje\n  .replace(/\\*/g, \"\") // Quitar asteriscos de markdown\n  .replace(/‚îÅ/g, \"-\"); // Reemplazar caracteres especiales\n\n// Retornar resultado\nconst resultado = {\n  json: {\n    mensaje_html: mensaje, // Con formato markdown para Telegram\n    mensaje_texto: mensajeTextoPlano, // Texto plano\n    parse_mode: \"Markdown\", // Para Telegram\n    total_productos: productos.length,\n    productos_exitosos: totalProductosActualizados,\n    productos_con_error: productos.filter(p => p.esError).length,\n    total_unidades_ingresadas: totalUnidadesIngresadas,\n    fecha_procesamiento: new Date().toISOString(),\n    resumen_productos: productos,\n    tipo_operacion: \"actualizacion_inventario\"\n  }\n};\n\nconsole.log(`üìä Mensaje de confirmaci√≥n generado:`);\nconsole.log(`   - Productos procesados: ${productos.length}`);\nconsole.log(`   - Productos exitosos: ${totalProductosActualizados}`);\nconsole.log(`   - Total unidades: ${totalUnidadesIngresadas}`);\n\nreturn [resultado];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[576,288],"id":"1e22ca67-fad4-4aa3-ab91-a6a269b2686d","name":"Code"},{"parameters":{"resource":"messages-api","instanceName":"={{ $('Edit Fields3').first().json.instancia }}","remoteJid":"={{ $('Edit Fields3').first().json.sessionid }}","messageText":"={{ $json.mensaje_texto }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[912,288],"id":"c1ed25e2-8f33-4b1a-baab-c9a5a6e5c0fd","name":"Enviar texto3","credentials":{"evolutionApi":{"id":"KDzQAvjURY1uhhvT","name":"Evolution account"}}},{"parameters":{"workflowInputs":{"values":[{"name":"mensaje"},{"name":"wa_id"},{"name":"instancia"},{"name":"fecha"}]}},"id":"73425a14-c933-4d6e-9578-2e9d127d8a40","typeVersion":1.1,"name":"When Executed by Another Workflow","type":"n8n-nodes-base.executeWorkflowTrigger","position":[-1904,288]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"3933eeb3-38f1-45ab-a719-1abbd34b8430","leftValue":"={{ $json.error }}","rightValue":"","operator":{"type":"boolean","operation":"exists","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-16,272],"id":"eaf49c7b-aab8-4938-a5f1-d723f70a00c0","name":"If"},{"parameters":{"assignments":{"assignments":[{"id":"3d3a0c8b-59f7-4c35-aa97-b04184a65374","name":"mensaje","value":"={{ $json.mensaje }} Verifica aqui en la lista de PRODUCTOS","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[256,96],"id":"bccac399-ea9e-4d64-ae7a-a2f43a003e36","name":"Edit Fields"},{"parameters":{"resource":"messages-api","instanceName":"={{ $('Edit Fields3').item.json.instancia }}","remoteJid":"={{ $('Edit Fields3').item.json.sessionid }}","messageText":"={{ $json.errores[0] }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[-672,432],"id":"d9e2a37f-4f0c-43e1-819a-1ab5f713d6a2","name":"Enviar texto","credentials":{"evolutionApi":{"id":"KDzQAvjURY1uhhvT","name":"Evolution account"}}},{"parameters":{"operation":"select","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"cache_inventario","mode":"list","cachedResultName":"cache_inventario"},"options":{"outputColumns":["producto","unidad_medida","factor_unidades","stock_actual_unidades"]}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-512,272],"id":"df422032-cca3-4407-81d9-f05e8f320321","name":"obetener_inventario","executeOnce":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"operation":"update","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"cache_inventario","mode":"list","cachedResultName":"cache_inventario"},"columns":{"mappingMode":"defineBelow","value":{"producto":"={{ $json.producto }}","stock_actual_unidades":"={{ $json.stock_actual_unidades }}","updated_at":"2025-10-07T16:16:32"},"matchingColumns":["producto"],"schema":[{"id":"producto","displayName":"producto","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"unidad_medida","displayName":"unidad_medida","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"factor_unidades","displayName":"factor_unidades","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"stock_actual_unidades","displayName":"stock_actual_unidades","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true},{"id":"precio_ultima_compra","displayName":"precio_ultima_compra","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"fecha_ultima_compra","displayName":"fecha_ultima_compra","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"updated_at","displayName":"updated_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[336,288],"id":"aef8de2c-8ee3-495b-a55a-edf0bd79ce71","name":"actualizar inventario","credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"registro_entrada_inventario","mode":"list","cachedResultName":"registro_entrada_inventario"},"columns":{"mappingMode":"defineBelow","value":{"cantidad":"={{ $json.cantidad }}","producto":"={{ $json.producto }}","fecha":"2025-10-08T13:05:19","unidad_medida":"={{ $json.unidad_medida }}"},"matchingColumns":["producto"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"cantidad","displayName":"cantidad","required":true,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true,"removed":false},{"id":"unidad_medida","displayName":"unidad_medida","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"producto","displayName":"producto","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"fecha","displayName":"fecha","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[320,496],"id":"e5789b11-4773-448f-9ba3-9ef0bf65db7c","name":"registro de compras","credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"modelId":{"__rl":true,"value":"models/gemini-2.0-flash","mode":"list","cachedResultName":"models/gemini-2.0-flash"},"messages":{"values":[{"content":"={{ $json.final_message }}"}]},"options":{"systemMessage":"=Prompt para Extracci√≥n de Inventario\nObjetivo\nAnaliza el mensaje de compra y extrae la informaci√≥n de productos en formato JSON. Los productos v√°lidos siempre vienen marcados entre comillas dobles.\nReglas de Procesamiento\n1. Detecci√≥n de Productos\n\nSi el mensaje NO contiene texto entre comillas: Devuelve el mensaje exactamente como viene, sin modificaciones.\nSi el mensaje contiene texto entre comillas: Procede con la extracci√≥n seg√∫n las reglas siguientes.\n\n2. Extracci√≥n de Informaci√≥n\nCANTIDAD\n\nExtrae el n√∫mero que indica cu√°ntas unidades se compraron\nSi no se especifica cantidad, usa 0\n\nPRODUCTO\n\nUsa el texto que est√° entre comillas, eliminando las comillas\nEjemplo: \"Coca Cola 350ml\" ‚Üí Coca Cola 350ml\n\nUNIDAD_MEDIDA\n\nExtrae la unidad de medida mencionada en el mensaje\nNormaliza siempre al plural: caja ‚Üí cajas, paquete ‚Üí paquetes, litro ‚Üí litros\nUnidades v√°lidas: cajas, pacas, unidades, botellas, litros, paquetes\nSi el usuario menciona una unidad, usa esa unidad (no asumas ni cambies)\nSi no se especifica unidad, usa \"unidades\"\n\nFormato de Respuesta\nPara UN producto:\njson[\n  {\n    \"CANTIDAD\": 3,\n    \"PRODUCTO\": \"Coca Cola 350ml\",\n    \"UNIDAD_MEDIDA\": \"cajas\"\n  }\n]\nPara M√öLTIPLES productos:\njson[\n  {\n    \"CANTIDAD\": 3,\n    \"PRODUCTO\": \"Coca Cola 350ml\",\n    \"UNIDAD_MEDIDA\": \"cajas\"\n  },\n  {\n    \"CANTIDAD\": 5,\n    \"PRODUCTO\": \"Papas Margarita\",\n    \"UNIDAD_MEDIDA\": \"paquetes\"\n  }\n]\nEjemplos de Procesamiento\nEjemplo 1 - Con cantidad clara:\n\nEntrada: Compr√© 5 cajas de \"Coca Cola 350ml\"\nSalida:\n\njson[\n  {\n    \"CANTIDAD\": 5,\n    \"PRODUCTO\": \"Coca Cola 350ml\",\n    \"UNIDAD_MEDIDA\": \"cajas\"\n  }\n]\nEjemplo 2 - Sin cantidad:\n\nEntrada: Compr√© \"Coca Cola 350ml\"\nSalida:\n\njson[\n  {\n    \"CANTIDAD\": 0,\n    \"PRODUCTO\": \"Coca Cola 350ml\",\n    \"UNIDAD_MEDIDA\": \"unidades\"\n  }\n]\nEjemplo 3 - Sin comillas:\n\nEntrada: Necesito revisar el inventario\nSalida: Necesito revisar el inventario\n\nEjemplo 4 - M√∫ltiples productos:\n\nEntrada: Compr√© 3 cajas de \"Coca Cola\" y 10 unidades de \"Papas Margarita\"\nSalida:\n\njson[\n  {\n    \"CANTIDAD\": 3,\n    \"PRODUCTO\": \"Coca Cola\",\n    \"UNIDAD_MEDIDA\": \"cajas\"\n  },\n  {\n    \"CANTIDAD\": 10,\n    \"PRODUCTO\": \"Papas Margarita\",\n    \"UNIDAD_MEDIDA\": \"unidades\"\n  }\n]\nMensaje a Procesar\n{{ $json.final_message }}\nIMPORTANTE\n\nResponde √öNICAMENTE con el JSON v√°lido (sin explicaciones) o con el mensaje sin comillas\nSIEMPRE devuelve un array, incluso para un solo producto\nLas variables del JSON deben estar en MAY√öSCULAS\nNO inventes informaci√≥n que no est√© en el mensaje"}},"type":"@n8n/n8n-nodes-langchain.googleGemini","typeVersion":1,"position":[-1472,288],"id":"1c4ea613-628b-4885-b29f-5bafb75becb3","name":"Message a model","credentials":{"googlePalmApi":{"id":"2llV2c1H3lSUoFpn","name":"milenaGRATIS"}}}],"connections":{"Code4":{"main":[[{"node":"Procesar_compra","type":"main","index":0}]]},"Procesar_compra":{"main":[[{"node":"obetener_inventario","type":"main","index":0}],[{"node":"Enviar texto","type":"main","index":0}]]},"Calcular_Stock":{"main":[[{"node":"If","type":"main","index":0}]]},"Edit Fields3":{"main":[[{"node":"Message a model","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"Edit Fields3","type":"main","index":0}]]},"If":{"main":[[{"node":"Edit Fields","type":"main","index":0}],[{"node":"registro de compras","type":"main","index":0},{"node":"actualizar inventario","type":"main","index":0}]]},"obetener_inventario":{"main":[[{"node":"Calcular_Stock","type":"main","index":0}]]},"Code":{"main":[[{"node":"Enviar texto3","type":"main","index":0}]]},"Edit Fields":{"main":[[]]},"actualizar inventario":{"main":[[{"node":"Code","type":"main","index":0}]]},"registro de compras":{"main":[[]]},"Message a model":{"main":[[{"node":"Code4","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/Bogota","callerPolicy":"workflowsFromSameOwner","executionTimeout":15,"availableInMCP":false,"errorWorkflow":"6372jK3MqgOJM8iD"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"3b6d31d0-b6e6-4258-b479-0d9e23ccad34","triggerCount":0,"shared":[{"createdAt":"2025-10-06T05:18:58.477Z","updatedAt":"2025-10-06T05:18:58.477Z","role":"workflow:owner","workflowId":"Wg6zh3EFPjY6VqYI","projectId":"5qz94e5MiZbyOPrk"}],"tags":[]}