{"createdAt":"2025-10-06T05:12:12.194Z","updatedAt":"2025-10-20T18:41:44.000Z","id":"3wlUF6WHBhmhYuJU","name":"Registra_ventas","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowInputs":{"values":[{"name":"tenant_id"},{"name":"user_id"},{"name":"permisos"},{"name":"rol"},{"name":"nombre_usuario"},{"name":"mensaje"},{"name":"numero_telefono"},{"name":"date_time"},{"name":"instancia"},{"name":"autorizado"}]}},"id":"b9ad0348-e5d0-4e93-a1f1-354ce0469d89","typeVersion":1.1,"name":"When Executed by Another Workflow","type":"n8n-nodes-base.executeWorkflowTrigger","position":[-2400,192]},{"parameters":{"assignments":{"assignments":[{"id":"4df07822-8763-486d-b9f4-8255febbd98e","name":"final_message","value":"={{ $('When Executed by Another Workflow').item.json.mensaje }}","type":"string"},{"id":"99a328cc-a6e0-4617-945e-1e2059367a83","name":"date_time","value":"={{ $('When Executed by Another Workflow').item.json.date_time }}","type":"string"},{"id":"99a1be42-9f08-40f1-b3be-fb9703518502","name":"instancia","value":"={{ $('When Executed by Another Workflow').item.json.instancia }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1488,176],"id":"f5373d26-cb6e-4ff9-a335-da1cd7d074d4","name":"Edit Fields"},{"parameters":{"jsCode":"// Capturamos el texto desde la propiedad correcta\nconst texto = String($input.first().json.content.parts[0].text || '').trim();\n\n// Regex para extraer \"producto\" cantidad\nconst regex = /\"([^\"]+)\"\\s+(\\d+(?:\\.\\d+)?)/g;\n\nconst filas = [];\nlet match;\n\nwhile ((match = regex.exec(texto)) !== null) {\n  filas.push({\n    producto: match[1].replace(/_/g, ' '),\n    cantidad: parseFloat(match[2]),\n    fecha: new Date().toLocaleString('es-CO', { timeZone: 'America/Bogota' })\n  });\n}\n\nreturn filas;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-880,176],"id":"d9c631b7-a74b-4c22-981d-3b75b42e8ca8","name":"Code_ventas"},{"parameters":{"jsCode":"// Obtenemos todas las ventas desde Code_ventas\nconst ventas = $('Code_ventas').all().map(item => item.json);\n\n// CAMBIO: Obtenemos los precios desde \"Obtener precios desde Postgres\"\nconst precios = $('Obtener precios desde Postgres').all().map(item => item.json);\n\n// Funci√≥n para buscar el precio y costo de un producto\nfunction buscarPrecio(nombreProducto) {\n  const nombreVenta = nombreProducto.toLowerCase().replace(/_/g, ' ').trim();\n  \n  for (const p of precios) {\n    const nombrePrecio = p.producto.toLowerCase().replace(/_/g, ' ').trim();\n    if (nombrePrecio === nombreVenta) {\n      return {\n        precio: parseFloat(p.precio_unitario),\n        costo: parseFloat(p.costo || 0),\n        error: false,\n        productoEncontrado: p.producto\n      };\n    }\n  }\n  \n  // Si no se encuentra, devuelve error\n  return { \n    precio: 0, \n    costo: 0, \n    error: true,\n    productoEncontrado: null\n  };\n}\n\n// Procesamos todas las ventas\nreturn ventas.map(v => {\n  const resultado = buscarPrecio(v.producto);\n  \n  if (resultado.error) {\n    return {\n      json: {\n        PRODUCTO: v.producto,\n        CANTIDAD: Number(v.cantidad),\n        VALOR_UNITARIO: 0,\n        VALOR_TOTAL: 0,\n        COSTO: 0,\n        FECHA: v.fecha,\n        ERROR: true,\n        MENSAJE_ERROR: `${v.producto}: No existe en el inventario.`\n      }\n    };\n  }\n  \n  const valorTotal = Number(v.cantidad) * resultado.precio;\n  \n  return {\n    json: {\n      PRODUCTO: v.producto,\n      CANTIDAD: Number(v.cantidad),\n      VALOR_UNITARIO: resultado.precio,\n      VALOR_TOTAL: valorTotal,\n      COSTO: resultado.costo,\n      FECHA: v.fecha,\n      ERROR: false,\n      MENSAJE: null\n    }\n  };\n});"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-336,176],"id":"3bd82b6e-19d7-44da-bc31-406a188b5386","name":"Cruce_precio_venta"},{"parameters":{"jsCode":"// C√≥digo para nodo Code de n8n - Confirmaci√≥n de Ventas con C√≥digo\n// Obtener los datos de entrada\nconst inputData = $input.all();\n\n// Arrays para procesar los datos\nconst ventasItems = [];\nlet totalGeneral = 0;\n\n// Productos que no deben mostrar stock\nconst productosExcluidosStock = [\n  'Arepa con queso',\n  'arepa con queso',\n  'chorizo',\n  'chorizos',\n  'arepa burguer'\n];\n\n// Funci√≥n para verificar si un producto debe excluir el stock\nconst debeExcluirStock = (producto) => {\n  const productoLower = producto.toLowerCase().trim();\n  return productosExcluidosStock.some(excluido => \n    productoLower.includes(excluido) || excluido.includes(productoLower)\n  );\n};\n\n// Funci√≥n para manejar plurales\nconst manejarPlural = (cantidad, producto) => {\n  const cantidadNum = parseInt(cantidad);\n  if (cantidadNum === 1) {\n    const palabras = producto.trim().split(' ');\n    let primeraPalabra = palabras[0];\n    if (primeraPalabra.endsWith('s') && primeraPalabra.length > 1) {\n      const excepcionesS = ['lapis', 'virus', 'tesis', 'crisis', 'oasis', 'martes', 'miercoles', 'jueves', 'viernes'];\n      const palabraLower = primeraPalabra.toLowerCase();\n      if (!excepcionesS.some(excepcion => palabraLower.includes(excepcion))) {\n        if (primeraPalabra.endsWith('es') && primeraPalabra.length > 2) {\n          const antesDe_es = primeraPalabra[primeraPalabra.length - 3];\n          if (!'aeiou√°√©√≠√≥√∫'.includes(antesDe_es.toLowerCase())) {\n            primeraPalabra = primeraPalabra.slice(0, -2);\n          } else {\n            primeraPalabra = primeraPalabra.slice(0, -1);\n          }\n        } else {\n          primeraPalabra = primeraPalabra.slice(0, -1);\n        }\n      }\n    }\n    palabras[0] = primeraPalabra;\n    return palabras.join(' ');\n  }\n  return producto;\n};\n\n// Procesar cada fila de datos\nfor (const item of inputData) {\n  const { \n    CANTIDAD, \n    PRODUCTO, \n    VALOR_UNITARIO, \n    VALOR_TOTAL,\n    STOCK_ACTUAL_UNIDADES,\n    CODIGO  // ‚Üê Campo con el c√≥digo de venta (P025, P026, etc)\n  } = item.json;\n\n  // Validar que todos los campos necesarios est√©n presentes\n  if (!CANTIDAD || !PRODUCTO || !VALOR_TOTAL || STOCK_ACTUAL_UNIDADES == null) {\n    console.log('Datos incompletos en una fila:', item.json);\n    continue;\n  }\n\n  // Formatear valores monetarios\n  const formatCurrency = (value) => {\n    return Number(value).toLocaleString('es-CO');\n  };\n\n  // Manejar plural/singular del producto\n  const productoFormateado = manejarPlural(CANTIDAD, PRODUCTO);\n  \n  // Crear item con o sin stock seg√∫n el producto\n  let itemFormateado;\n  if (debeExcluirStock(PRODUCTO)) {\n    itemFormateado = `- [${CODIGO}] ${parseInt(CANTIDAD)} ${productoFormateado} = ${formatCurrency(VALOR_TOTAL)}`;\n  } else {\n    itemFormateado = `- [${CODIGO}] ${parseInt(CANTIDAD)} ${productoFormateado} = ${formatCurrency(VALOR_TOTAL)} (Stock: ${STOCK_ACTUAL_UNIDADES})`;\n  }\n  \n  ventasItems.push(itemFormateado);\n  \n  // Sumar al total general\n  totalGeneral += Number(VALOR_TOTAL);\n}\n\n// Formatear el total general\nconst totalFormateado = totalGeneral.toLocaleString('es-CO');\n\n// Crear mensaje de texto\nlet mensajeTexto = '‚úÖ Registro de ventas:\\n\\n';\nmensajeTexto += ventasItems.join('\\n');\nmensajeTexto += `\\n\\nüí∞ Total de la venta: $ ${totalFormateado}`;\n\n// Crear objeto de respuesta\nconst resultado = {\n  mensaje_texto: mensajeTexto,\n  total_venta: totalGeneral,\n  cantidad_items: ventasItems.length,\n  items: ventasItems,\n  fecha_registro: new Date().toLocaleDateString('es-CO'),\n  hora_registro: new Date().toLocaleTimeString('es-CO', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  })\n};\n\n// Retornar resultado en formato n8n\nreturn [{ json: resultado }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2176,304],"id":"8bc571e5-ea69-4f65-9fc3-8e35b2dfac13","name":"mensaje_confirmacion1"},{"parameters":{"jsCode":"// ===== RESTAR VENTAS DEL INVENTARIO - VERSI√ìN CORREGIDA =====\nconsole.log('=== INICIO: ACTUALIZAR INVENTARIO CON VENTAS ===');\n\ntry {\n  // 1. OBTENER VENTAS DESDE EL NODO ANTERIOR EN EL FLUJO\n  console.log('1. Obteniendo ventas...');\n  \n  // Como Postgres solo devuelve success, necesitamos obtener las ventas de otro lugar\n  // Buscar en el flujo el nodo que tenga los datos de ventas\n  let ventasData = [];\n  \n  try {\n    // Intentar obtener desde Cruce_precio_venta (nodo anterior a Postgres)\n    ventasData = $('Cruce_precio_venta').all();\n    console.log('‚úÖ Ventas obtenidas desde Cruce_precio_venta:', ventasData?.length || 0, 'registros');\n  } catch (e) {\n    console.log('‚ö†Ô∏è No se pudieron obtener ventas desde Cruce_precio_venta');\n    return $input.all(); // Devolver inventario sin cambios\n  }\n\n  // 2. OBTENER INVENTARIO DESDE EL INPUT ACTUAL (MERGE)\n  console.log('2. Obteniendo inventario actual...');\n  const inventarioDataRaw = $input.all();\n  console.log('‚úÖ Inventario obtenido (raw):', inventarioDataRaw?.length || 0, 'registros');\n  \n  // ======= DEDUPLICAR INVENTARIO =======\n  console.log('3. Deduplicando inventario...');\n  const inventarioMap = new Map();\n  \n  inventarioDataRaw.forEach((item, index) => {\n    const producto = item.json.PRODUCTO;\n    const rowNumber = item.json.row_number;\n    \n    if (producto) {\n      const key = rowNumber ? `${producto}_${rowNumber}` : producto;\n      \n      if (!inventarioMap.has(key)) {\n        inventarioMap.set(key, item);\n        console.log(`üìù Agregado: ${producto} (row: ${rowNumber})`);\n      } else {\n        console.log(`‚ö†Ô∏è Duplicado ignorado: ${producto} (row: ${rowNumber})`);\n      }\n    }\n  });\n  \n  const inventarioData = Array.from(inventarioMap.values());\n  console.log('‚úÖ Inventario deduplicado:', inventarioData.length, 'registros √∫nicos');\n\n  // 3. VALIDACIONES\n  if (!ventasData || ventasData.length === 0) {\n    console.log('‚ö†Ô∏è No hay ventas para procesar - RETORNANDO INVENTARIO SIN CAMBIOS');\n    return inventarioData;\n  }\n\n  if (!inventarioData || inventarioData.length === 0) {\n    console.log('‚ùå No hay inventario para actualizar');\n    return [];\n  }\n\n  // 4. CONSOLIDAR VENTAS POR PRODUCTO\n  console.log('4. Consolidando ventas por producto...');\n  const ventasConsolidadas = {};\n  \n  ventasData.forEach((venta, ventaIndex) => {\n    const productoVenta = venta.json.PRODUCTO;\n    const cantidadVenta = parseInt(venta.json.CANTIDAD) || 0;\n    \n    console.log(`üîç Venta ${ventaIndex + 1}: ${productoVenta} - ${cantidadVenta} unidades`);\n    \n    if (!ventasConsolidadas[productoVenta]) {\n      ventasConsolidadas[productoVenta] = 0;\n    }\n    ventasConsolidadas[productoVenta] += cantidadVenta;\n  });\n  \n  console.log('üìã Ventas consolidadas:', ventasConsolidadas);\n\n  // 5. APLICAR DESCUENTOS AL INVENTARIO\n  console.log('5. Aplicando descuentos al inventario...');\n  const inventarioActualizado = [];\n  const productosActualizados = [];\n\n  inventarioData.forEach((itemInventario, index) => {\n    const productoInventario = itemInventario.json.PRODUCTO;\n    let nuevoItem = { ...itemInventario.json };\n    \n    if (ventasConsolidadas.hasOwnProperty(productoInventario)) {\n      const cantidadTotalVendida = ventasConsolidadas[productoInventario];\n      const stockActual = parseInt(itemInventario.json.STOCK_ACTUAL_UNIDADES) || 0;\n      const nuevoStock = stockActual - cantidadTotalVendida;\n      \n      console.log(`üìä ${productoInventario}: ${stockActual} ‚Üí ${nuevoStock} (vendido: ${cantidadTotalVendida})`);\n      \n      nuevoItem.STOCK_ACTUAL_UNIDADES = nuevoStock;\n      \n      productosActualizados.push({\n        producto: productoInventario,\n        stockAnterior: stockActual,\n        cantidadVendida: cantidadTotalVendida,\n        stockNuevo: nuevoStock,\n        rowNumber: nuevoItem.row_number\n      });\n      \n      delete ventasConsolidadas[productoInventario];\n    }\n    \n    inventarioActualizado.push({ json: nuevoItem });\n  });\n\n  console.log(`\\nüìä RESUMEN DE ACTUALIZACI√ìN:`);\n  console.log(`   Productos actualizados: ${productosActualizados.length}`);\n  \n  if (productosActualizados.length > 0) {\n    console.log('\\n‚úÖ PRODUCTOS ACTUALIZADOS:');\n    productosActualizados.forEach(item => {\n      console.log(`   - ${item.producto} (fila ${item.rowNumber}): ${item.stockAnterior} ‚Üí ${item.stockNuevo} (-${item.cantidadVendida})`);\n    });\n  }\n\n  console.log('=== FIN: ACTUALIZAR INVENTARIO CON VENTAS ===');\n  \n  return inventarioActualizado;\n\n} catch (error) {\n  console.log('‚ùå ERROR GENERAL:', error.message);\n  return [{ \n    json: { \n      ERROR: 'Error procesando inventario', \n      detalle: error.message\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1248,496],"id":"a2e2da4e-d04d-4bce-87b6-5d2a6ca7ffd2","name":"Procesar_actualizacion_inventario","alwaysOutputData":false},{"parameters":{"mode":"combine","fieldsToMatchString":"PRODUCTO","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1952,304],"id":"a4ac5fa2-4fa0-416f-8445-6db0939bd94e","name":"Merge"},{"parameters":{"assignments":{"assignments":[{"id":"8582deaa-2a78-421a-980e-a35e73d07916","name":"PRODUCTO","value":"={{ $json.items[0].PRODUCTO }}","type":"string"},{"id":"56b5ef83-cf55-4b64-9578-0d5a819ce511","name":"CANTIDAD","value":"={{ $json.items[0].CANTIDAD }}","type":"number"},{"id":"84ed84b3-af6a-4dea-8bb1-ff992752ed42","name":"VALOR_UNITARIO","value":"={{ $json.items[0].VALOR_UNITARIO }}","type":"number"},{"id":"e9297a2f-1812-4832-a7e6-0dafd8e7ebd9","name":"VALOR_TOTAL","value":"={{ $json.items[0].VALOR_TOTAL }}","type":"number"},{"id":"7efaf158-9f0b-43ec-b3b1-223aeea0f776","name":"FECHA","value":"={{ $('Edit Fields').first().json.date_time }}","type":"string"},{"id":"89d2e179-9dbe-446a-a81d-ad05d4bf99ea","name":"CODIGO","value":"={{ $json.codigo }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[768,288],"id":"ec927ac0-e902-41f5-b465-2df33cd465a9","name":"Edit Fields2"},{"parameters":{"assignments":{"assignments":[{"id":"8c3c14b8-5953-4e33-a111-44d6e0c7f7d6","name":"PRODUCTO","value":"={{ $json.producto }}","type":"string"},{"id":"c02899c8-cb13-4751-8864-9fb81d66474e","name":"STOCK_ACTUAL_UNIDADES","value":"={{ $json.cantidad }}","type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1664,496],"id":"cbfef4ff-7f82-43af-86f1-e5ae450cd844","name":"Edit Fields4"},{"parameters":{"resource":"messages-api","instanceName":"={{ $('Edit Fields').first().json.instancia }}","remoteJid":"={{ $('When Executed by Another Workflow').first().json.numero_telefono }}","messageText":"={{ $json.mensaje_texto }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[2400,304],"id":"4286bba7-502d-4999-8070-5d468cb1b332","name":"Enviar texto","credentials":{"evolutionApi":{"id":"KDzQAvjURY1uhhvT","name":"Evolution account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8d145fac-fbf5-438e-876c-1dbad85482f3","leftValue":"={{ $json.ERROR === true }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-32,192],"id":"c0f853b2-5a9a-4a9e-ae61-3aa9a224d90b","name":"If"},{"parameters":{"resource":"messages-api","instanceName":"={{ $('Edit Fields').first().json.instancia }}","remoteJid":"={{ $('Edit Fields').first().json.wa_id }}","messageText":"={{ $json.MENSAJE_ERROR }}","options_message":{}},"type":"n8n-nodes-evolution-api.evolutionApi","typeVersion":1,"position":[400,0],"id":"925c8f62-dd1c-402d-8a43-7b71fc581db9","name":"Enviar texto1","credentials":{"evolutionApi":{"id":"KDzQAvjURY1uhhvT","name":"Evolution account"}}},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1040,496],"id":"83481058-4243-4d14-a8a0-50c6cc269127","name":"Merge Cache Inventario"},{"parameters":{"operation":"executeQuery","query":"INSERT INTO ventas (\n  tenant_id,\n  user_id,\n  items,\n  total,\n  activo\n) VALUES (\n  '{{ $('Guardar tenant').first().json.tenant_id }}',\n  '{{ $('Guardar tenant').first().json.user_id }}',\n  '{{ JSON.stringify([$json]) }}'::jsonb,\n  {{ $json.VALOR_TOTAL }},\n  true\n)\nRETURNING *;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[304,272],"id":"322a4c41-5de5-4c1a-a6ae-66da4fe077ef","name":"Guardar_venta_en_Postgres","credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  producto_id,\n  codigo,\n  producto,\n  precio_unitario,\n  costo\nFROM productos\nWHERE tenant_id = '{{ $('Guardar tenant').item.json.tenant_id }}'\n  AND activo = true\nORDER BY producto;\n\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-592,176],"id":"2ab1a049-d94f-4a8b-9d39-7f16998eac8e","name":"Obtener precios desde Postgres","executeOnce":true,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  producto as \"PRODUCTO\",\n  unidad as \"UNIDAD_MEDIDA\",\n  1 as \"FACTOR_UNIDADES\",\n  cantidad as \"STOCK_ACTUAL_UNIDADES\"\nFROM inventario\nWHERE tenant_id = '{{ $('Guardar tenant').first().json.tenant_id }}'\nORDER BY producto;\n\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[784,480],"id":"719f081b-491e-449d-a938-2fcc948363a2","name":"Obtener inventario desde Postgres","executeOnce":true,"alwaysOutputData":false,"credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"UPDATE inventario\nSET \n  cantidad = {{ $json.STOCK_ACTUAL_UNIDADES }},\n  updated_at = CURRENT_TIMESTAMP,\n  updated_by = '{{ $('Guardar tenant').first().json.user_id }}'\nWHERE tenant_id = '{{ $('Guardar tenant').first().json.tenant_id }}'\n  AND producto = '{{ $json.PRODUCTO }}'\nRETURNING *;\n\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1440,496],"id":"a8fb7bb8-56f2-483d-8f08-abdf1ada34aa","name":"Actualizar stock en Postgres","credentials":{"postgres":{"id":"YBRduKQYniIuW5Mp","name":"Postgres account"}}},{"parameters":{"modelId":{"__rl":true,"value":"models/gemini-2.0-flash","mode":"list","cachedResultName":"models/gemini-2.0-flash"},"messages":{"values":[{"content":"={{ $json.final_message }}"}]},"options":{"systemMessage":"=# INSTRUCCIONES PARA TRANSFORMAR VENTAS\n\nTu labor es transformar el mensaje {{ $json.final_message }} de ventas siguiendo **EXACTAMENTE** el formato especificado.\n\n## FORMATO DE SALIDA OBLIGATORIO\n\n**ESTRUCTURA:** \"NombreProducto\" cantidad, \"NombreProducto\" cantidad\n\n**REGLAS ESTRICTAS:**\n1. Cada producto entre comillas dobles\n2. Espacio despu√©s de las comillas y antes de la cantidad\n3. Coma y espacio entre productos\n4. NO agregar saltos de l√≠nea (\\n)\n5. NO cambiar may√∫sculas/min√∫sculas de los nombres de productos\n6. Mantener los nombres EXACTOS de los productos del mensaje original\n7. **ELIMINAR puntos (.) que est√©n al FINAL de los nombres de productos**\n8. Unir los nombres duplicados y sumar las cantidades\n\n## EJEMPLOS DE FORMATO (usa los productos del mensaje real, NO estos):\n\n**Ejemplo de entrada:** \"4 [ProductoA] y 1 [ProductoB]\"\n**Ejemplo de salida:** \"[ProductoA]\" 4, \"[ProductoB]\" 1\n\n**Ejemplo de entrada:** \"2 combos y 3 [ProductoC]\"\n**Ejemplo de salida:** \"[TipoArepa]\" 2, \"[TipoChorizo]\" 2, \"[ProductoC]\" 3\n\n**Ejemplo de entrada:** \"1 Gaseosa 350 ml. y 2 Chorizos.\"\n**Ejemplo de salida:** \"Gaseosa 350 ml\" 1, \"Chorizos\" 2\n\n## LIMPIEZA DE NOMBRES\n- Elimina puntos (.) solo si est√°n al FINAL del nombre del producto\n- Ejemplos: \"Gaseosa 350 ml.\" ‚Üí \"Gaseosa 350 ml\"\n- NO elimines puntos que est√©n en medio del nombre\n\n## IMPORTANTE:\n- Devuelve √öNICAMENTE el formato de salida especificado\n- NO agregues explicaciones\n- NO agregues saltos de l√≠nea\n- RESPETA exactamente las comillas y espacios\n- USA SOLO los productos mencionados en {{ $json.final_message }}"}},"type":"@n8n/n8n-nodes-langchain.googleGemini","typeVersion":1,"position":[-1264,176],"id":"9aa1ecfd-e65c-458d-8296-af3f30599287","name":"Message a model","credentials":{"googlePalmApi":{"id":"2llV2c1H3lSUoFpn","name":"milenaGRATIS"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"940d13a5-4dcf-4eac-9587-0bfe0cdf16ec","leftValue":"={{ $json.permisos.ventas.crear }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-1776,192],"id":"0212dd80-ffbd-440c-bf82-e18dadb1994c","name":"Tiene Permiso Ventas"},{"parameters":{"jsCode":"return { mensaje: \"‚ùå No tienes permiso para registrar ventas\" };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1584,400],"id":"91a53ec8-d6c4-41ce-adb4-104e98a99a95","name":"sin permiso ventas"},{"parameters":{"jsCode":"let datos;\n\nif ($json.pre_validado === true) {\n  datos = $json;\n} else {\n  datos = $json;\n}\n\nreturn {\n  tenant_id: datos.tenant_id,\n  user_id: datos.user_id,\n  permisos: datos.permisos,\n  rol: datos.rol,\n  nombre_usuario: datos.nombre_usuario\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2176,192],"id":"5b3cb5f5-c5a2-4874-a5e7-7547a30c482c","name":"Guardar tenant"},{"parameters":{"jsCode":"// Obtener los datos de entrada\nconst datos = $input.first().json;\n\n// Parsear permisos si vienen como string\nlet permisos = datos.permisos;\nif (typeof permisos === 'string') {\n  permisos = JSON.parse(permisos);\n}\n\nreturn {\n  tenant_id: datos.tenant_id,\n  user_id: datos.user_id,\n  rol: datos.rol,\n  nombre_usuario: datos.nombre_usuario,\n  permisos: permisos // Ahora es un objeto JSON\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1984,192],"id":"3878163f-5162-4386-b6e2-1e97bc996e7e","name":"Parsea permisos"}],"connections":{"When Executed by Another Workflow":{"main":[[{"node":"Guardar tenant","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Message a model","type":"main","index":0}]]},"Code_ventas":{"main":[[{"node":"Obtener precios desde Postgres","type":"main","index":0}]]},"Cruce_precio_venta":{"main":[[{"node":"If","type":"main","index":0}]]},"Procesar_actualizacion_inventario":{"main":[[{"node":"Actualizar stock en Postgres","type":"main","index":0}]]},"Merge":{"main":[[{"node":"mensaje_confirmacion1","type":"main","index":0}]]},"Edit Fields2":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Edit Fields4":{"main":[[{"node":"Merge","type":"main","index":1}]]},"If":{"main":[[{"node":"Enviar texto1","type":"main","index":0}],[{"node":"Guardar_venta_en_Postgres","type":"main","index":0}]]},"Merge Cache Inventario":{"main":[[{"node":"Procesar_actualizacion_inventario","type":"main","index":0}]]},"Guardar_venta_en_Postgres":{"main":[[{"node":"Obtener inventario desde Postgres","type":"main","index":0},{"node":"Edit Fields2","type":"main","index":0}]]},"Obtener precios desde Postgres":{"main":[[{"node":"Cruce_precio_venta","type":"main","index":0}]]},"Obtener inventario desde Postgres":{"main":[[{"node":"Merge Cache Inventario","type":"main","index":0}]]},"Actualizar stock en Postgres":{"main":[[{"node":"Edit Fields4","type":"main","index":0}]]},"mensaje_confirmacion1":{"main":[[{"node":"Enviar texto","type":"main","index":0}]]},"Message a model":{"main":[[{"node":"Code_ventas","type":"main","index":0}]]},"Tiene Permiso Ventas":{"main":[[{"node":"Edit Fields","type":"main","index":0}],[{"node":"sin permiso ventas","type":"main","index":0}]]},"Guardar tenant":{"main":[[{"node":"Parsea permisos","type":"main","index":0}]]},"Parsea permisos":{"main":[[{"node":"Tiene Permiso Ventas","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","timezone":"America/Bogota","callerPolicy":"workflowsFromSameOwner","executionTimeout":15,"availableInMCP":false,"errorWorkflow":"6372jK3MqgOJM8iD"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"When Executed by Another Workflow":[{"json":{"tenant_id":"eb4a0fe3-0914-4255-805f-75c06df5c422","user_id":"2e698d4e-74f7-4268-a8e7-17a372a0baa9","permisos":"{\"ventas\":{\"ver\":true,\"crear\":true,\"editar\":true,\"eliminar\":true},\"informes\":{\"ver\":true,\"exportar\":true},\"productos\":{\"ver\":true,\"crear\":true,\"editar\":true,\"eliminar\":true},\"inventario\":{\"ver\":true,\"modificar\":true}}","rol":"dueno","nombre_usuario":"Admin Test","mensaje":"3 \"Manzana 250ml\"","numero_telefono":"573103015865@s.whatsapp.net","date_time":"20/10/2025","instancia":"pepe cadena","autorizado":"true"}}]},"versionId":"3a43e20c-c84c-429c-8c91-c2e94d99f6f1","triggerCount":0,"shared":[{"createdAt":"2025-10-06T05:12:12.214Z","updatedAt":"2025-10-06T05:12:12.214Z","role":"workflow:owner","workflowId":"3wlUF6WHBhmhYuJU","projectId":"5qz94e5MiZbyOPrk"}],"tags":[{"createdAt":"2025-10-12T03:56:33.451Z","updatedAt":"2025-10-12T03:56:33.451Z","id":"1HiaED7XPSmwYswE","name":"ventas"}]}